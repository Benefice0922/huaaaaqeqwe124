from __future__ import annotations

import io
import re
import os
import json
import aiohttp
from typing import List

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db import get_settings, set_setting
from keyboards.settings import (
    get_settings_menu,
    get_common_menu,
    get_autostart_menu,
    get_fingerprint_menu,
    get_resolution_menu,
    get_hardware_menu,
    get_back_menu,
    get_api_main_menu,  # –î–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ keyboards/settings.py
)

router = Router()
router.event_types = {"message", "callback_query"}
API_CATALOG_CACHE = {}
class SettingsFSM(StatesGroup):
    waiting_for_timer = State()
    waiting_for_ua_file = State()
    waiting_for_custom_resolution = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è API
    waiting_for_bastart_project_token = State()
    waiting_for_bastart_worker_token = State()
    waiting_for_api_url = State()
    waiting_for_shortener_url = State()
    waiting_for_platform_id = State()
    waiting_for_profile_id = State()
    waiting_for_price = State()

def build_root_caption(s: dict) -> str:
    visible = "üëÅÔ∏è –í–∏–¥–∏–º" if s.get("browser_visible") else "üôà –°–∫—Ä—ã—Ç"
    no_proxy = "‚úÖ" if s.get("without_proxy") else "‚ùå"
    no_acc = "‚úÖ" if s.get("without_accounts") else "‚ùå"
    timer = s.get("autostart_timer")
    timer_txt = f"{timer} —Å–µ–∫." if timer else "–û—Ç–∫–ª—é—á–µ–Ω"
    ua_source = s.get("ua_source", "random")
    ua_count = int(s.get("ua_count", 0))
    ua_txt = "üé≤ –†–∞–Ω–¥–æ–º" if ua_source != "file" else f"üìÅ –§–∞–π–ª ({ua_count})"
    res_txt = s.get("screen_resolution") if (s.get("screen_resolution") and not s.get("random_resolution", True)) else "üé≤ –†–∞–Ω–¥–æ–º (–ü–ö ‚â•1440√ó900)"
    hw_src = s.get("hw_source", "auto")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API
    api_status = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    try:
        if os.path.exists('settings.json'):
            with open('settings.json', 'r', encoding='utf-8') as f:
                settings_data = json.load(f)
                api_settings = settings_data.get("api_settings", {})
                if api_settings.get("bastart_project_token") and api_settings.get("bastart_worker_token"):
                    platform_id = api_settings.get("default_platform_id", "?")
                    api_status = f"‚úÖ Platform: {platform_id}"
    except:
        pass
    
    return (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üïµÔ∏è <b>–ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç</b>\n"
        f"‚Ä¢ UA: <code>{ua_txt}</code>\n"
        f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: <code>{res_txt}</code>\n"
        f"‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <code>{'–ê–≤—Ç–æ' if hw_src=='auto' else '–ö–∞—Å—Ç–æ–º'}</code>\n\n"
        "‚öôÔ∏è <b>–û–±—â–∏–µ</b>\n"
        f"‚Ä¢ –í–∏–¥–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞: <code>{visible}</code>\n"
        f"‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏: <code>{no_proxy}</code> | –ë–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <code>{no_acc}</code>\n\n"
        "üîó <b>API –¥–ª—è —Å—Å—ã–ª–æ–∫</b>\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: <code>{api_status}</code>\n\n"
        "‚è± <b>–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫</b>\n"
        f"‚Ä¢ –¢–∞–π–º–µ—Ä: <code>{timer_txt}</code>"
    )

def build_autostart_caption(s: dict) -> str:
    t = s.get("autostart_timer")
    ttxt = f"{t} —Å–µ–∫." if t else "–û—Ç–∫–ª—é—á–µ–Ω"
    return "‚è± <b>–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫</b>\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.".format(ttxt)

def build_fingerprint_caption(s: dict) -> str:
    ua_source = s.get("ua_source", "random")
    ua_count = int(s.get("ua_count", 0))
    ua_txt = "üé≤ –†–∞–Ω–¥–æ–º" if ua_source != "file" else f"üìÅ –§–∞–π–ª ({ua_count})"
    res_txt = s.get("screen_resolution") if (s.get("screen_resolution") and not s.get("random_resolution", True)) else "üé≤ –†–∞–Ω–¥–æ–º (–ü–ö ‚â•1440√ó900)"
    hw_src = s.get("hw_source", "auto")
    return (
        "üïµÔ∏è <b>–ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç</b>\n"
        f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ UA: <code>{ua_txt}</code>\n"
        f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: <code>{res_txt}</code>\n"
        f"‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <code>{'–ê–≤—Ç–æ' if hw_src=='auto' else '–ö–∞—Å—Ç–æ–º'}</code>\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª UA / –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è API
def save_api_setting(key: str, value):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É API"""
    settings = {}
    if os.path.exists('settings.json'):
        with open('settings.json', 'r', encoding='utf-8') as f:
            settings = json.load(f)
    
    if "api_settings" not in settings:
        settings["api_settings"] = {}
    
    settings["api_settings"][key] = value
    
    with open('settings.json', 'w', encoding='utf-8') as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)

def get_api_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
    if os.path.exists('settings.json'):
        with open('settings.json', 'r', encoding='utf-8') as f:
            settings = json.load(f)
            return settings.get("api_settings", {})
    return {}

@router.callback_query(F.data == "settings")
async def show_settings(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text(build_root_caption(s), reply_markup=get_settings_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "settings_back_root")
async def settings_back_root(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text(build_root_caption(s), reply_markup=get_settings_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "open_common_settings")
async def open_common_settings(callback: types.CallbackQuery):
    await callback.answer()
    s = get_settings()
    await callback.message.edit_text("‚öôÔ∏è <b>–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å:", reply_markup=get_common_menu(s), parse_mode="HTML")

# ============= –ù–ê–°–¢–†–û–ô–ö–ò API =============

@router.callback_query(F.data == "open_api_settings")
async def open_api_settings(callback: types.CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
    await callback.answer()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        api_settings = get_api_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        is_configured = bool(
            api_settings.get("bastart_project_token") and 
            api_settings.get("bastart_worker_token")
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        project_token = api_settings.get("bastart_project_token", "")
        worker_token = api_settings.get("bastart_worker_token", "")
        api_url = api_settings.get("bastart_api_url", "https://web-api.bdev.su/")
        shortener_url = api_settings.get("shortener_api_url", "http://193.233.112.8/api/shorten")
        platform_id = api_settings.get("default_platform_id", 1)
        profile_id = api_settings.get("default_profile_id", 379783)
        price = api_settings.get("default_price", 0.11)
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = "‚úÖ" if is_configured else "‚ùå"
        status_text = "–ù–∞—Å—Ç—Ä–æ–µ–Ω" if is_configured else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            f"üîó <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –¥–ª—è —Å—Å—ã–ª–æ–∫</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n\n"
            f"<b>üîë –¢–æ–∫–µ–Ω—ã Bastart:</b>\n"
        )
        
        if project_token:
            text += f"‚Ä¢ Project: <code>{project_token[:15]}...</code>\n"
        else:
            text += "‚Ä¢ Project: <code>–Ω–µ –∑–∞–¥–∞–Ω</code>\n"
            
        if worker_token:
            text += f"‚Ä¢ Worker: <code>{worker_token[:15]}...</code>\n\n"
        else:
            text += "‚Ä¢ Worker: <code>–Ω–µ –∑–∞–¥–∞–Ω</code>\n\n"
            
        text += (
            f"<b>üì° –°–µ—Ä–≤–∏—Å:</b>\n"
            f"‚Ä¢ Platform ID: <code>{platform_id}</code>\n"
            f"‚Ä¢ Profile ID: <code>{profile_id}</code>\n"
            f"‚Ä¢ –¶–µ–Ω–∞: <code>{price}</code>\n\n"
            f"<b>üåê URL-–∞–¥—Ä–µ—Å–∞:</b>\n"
            f"‚Ä¢ API: <code>{api_url}</code>\n"
            f"‚Ä¢ Shortener: <code>{shortener_url}</code>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = get_api_main_menu(is_configured)
        
        await callback.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_back_root")]
            ]),
            parse_mode="HTML"
        )

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
@router.callback_query(F.data == "api_tokens_menu")
async def api_tokens_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ Bastart"""
    await callback.answer()
    
    api_settings = get_api_settings()
    project_token = api_settings.get("bastart_project_token", "")
    worker_token = api_settings.get("bastart_worker_token", "")
    
    text = (
        "üîë <b>–¢–æ–∫–µ–Ω—ã Bastart API</b>\n\n"
        f"<b>Project Token:</b>\n<code>{project_token if project_token else '–Ω–µ –∑–∞–¥–∞–Ω'}</code>\n\n"
        f"<b>Worker Token:</b>\n<code>{worker_token if worker_token else '–Ω–µ –∑–∞–¥–∞–Ω'}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )
    
    kb = [
        [types.InlineKeyboardButton(text="üìù Project Token", callback_data="set_project_token")],
        [types.InlineKeyboardButton(text="üìù Worker Token", callback_data="set_worker_token")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_api_settings")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
# –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é api_service_menu –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞

@router.callback_query(F.data == "api_profiles_select")
async def api_profiles_select(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    print(f"[DEBUG] api_profiles_select called by user {callback.from_user.id}")
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    api_settings = get_api_settings()
    print(f"[DEBUG] API settings loaded: {bool(api_settings)}")
    
    project_token = api_settings.get("bastart_project_token", "")
    worker_token = api_settings.get("bastart_worker_token", "")
    api_url = api_settings.get("bastart_api_url", "https://web-api.bdev.su/")
    
    print(f"[DEBUG] Tokens: project={bool(project_token)}, worker={bool(worker_token)}")
    
    if not project_token or not worker_token:
        print("[DEBUG] Tokens not configured")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã!",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="api_tokens_menu")],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="api_service_menu")]
            ]),
            parse_mode="HTML"
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –≤–º–µ—Å—Ç–æ bot.storage
    user_id = callback.from_user.id
    catalog = API_CATALOG_CACHE.get(user_id)
    
    print(f"[DEBUG] Catalog from cache: {bool(catalog)}")
    
    if not catalog:
        print("[DEBUG] Loading catalog from API...")
        # GET –∑–∞–ø—Ä–æ—Å –∫ API
        headers = {
            "X-Team-Token": project_token,
            "X-User-Token": worker_token,
            "Accept": "application/json"
        }
        
        try:
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                print(f"[DEBUG] Making GET request to {api_url}")
                async with session.get(api_url, headers=headers) as resp:
                    print(f"[DEBUG] Response status: {resp.status}")
                    if resp.status == 200:
                        catalog = await resp.json()
                        print(f"[DEBUG] Catalog loaded, keys: {catalog.keys() if catalog else 'None'}")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
                        API_CATALOG_CACHE[user_id] = catalog
                    else:
                        error_text = await resp.text()
                        print(f"[DEBUG] API Error: {error_text}")
                        await callback.answer(f"–û—à–∏–±–∫–∞ API: {resp.status}", show_alert=True)
                        return
        except Exception as e:
            print(f"[DEBUG] Exception during API call: {str(e)}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    if catalog and "your_profiles" in catalog:
        profiles = catalog["your_profiles"]
        print(f"[DEBUG] Profiles count: {len(profiles)}")
        
        if not profiles:
            print("[DEBUG] No profiles available")
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ Bastart API",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="api_service_menu")]
                ]),
                parse_mode="HTML"
            )
            return
        
        kb = []
        current_profile_id = api_settings.get("default_profile_id")
        
        for profile in profiles[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            profile_id = profile.get("id")
            profile_data = profile.get("data", {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            name = profile_data.get("name", "")
            fio = profile_data.get("fio", "")
            phone = profile_data.get("phone", "")
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: name -> fio -> phone
            display_name = name or fio or phone or f"–ü—Ä–æ—Ñ–∏–ª—å #{profile_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            display_text = f"#{profile_id}: {display_name}"
            if phone and display_name != phone:
                display_text += f" ‚Ä¢ {phone}"
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            if profile_id == current_profile_id:
                display_text = f"‚úÖ {display_text}"
            
            kb.append([
                types.InlineKeyboardButton(
                    text=display_text[:64],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    callback_data=f"api_set_profile:{profile_id}"
                )
            ])
        
        if len(profiles) > 10:
            kb.append([
                types.InlineKeyboardButton(
                    text=f"–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π",
                    callback_data="noop"
                )
            ])
        
        kb.append([
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="api_service_menu")
        ])
        
        print(f"[DEBUG] Sending menu with {len(kb)} buttons")
        await callback.message.edit_text(
            "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
            parse_mode="HTML"
        )
    else:
        print(f"[DEBUG] Catalog structure issue. Has catalog: {bool(catalog)}, has your_profiles: {'your_profiles' in catalog if catalog else False}")
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö", show_alert=True)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data.startswith("api_set_profile:"))
async def api_set_profile(callback: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π Profile ID"""
    profile_id = int(callback.data.split(":", 1)[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    save_api_setting("default_profile_id", profile_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑ –∫—ç—à–∞
    profile_name = f"#{profile_id}"
    user_id = callback.from_user.id
    catalog = API_CATALOG_CACHE.get(user_id)
    
    if catalog and "your_profiles" in catalog:
        for profile in catalog["your_profiles"]:
            if profile.get("id") == profile_id:
                profile_data = profile.get("data", {})
                name = profile_data.get("name", "")
                fio = profile_data.get("fio", "")
                profile_name = name or fio or f"#{profile_id}"
                break
    
    await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}", show_alert=True)
    await api_service_menu(callback)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
@router.callback_query(F.data == "api_catalog_select")
async def api_catalog_select(callback: types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã"""
    print(f"[DEBUG] api_catalog_select called by user {callback.from_user.id}")
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    
    api_settings = get_api_settings()
    project_token = api_settings.get("bastart_project_token", "")
    worker_token = api_settings.get("bastart_worker_token", "")
    api_url = api_settings.get("bastart_api_url", "https://web-api.bdev.su/")
    
    print(f"[DEBUG] API URL: {api_url}")
    print(f"[DEBUG] Tokens present: project={bool(project_token)}, worker={bool(worker_token)}")
    
    if not project_token or not worker_token:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã!",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="api_tokens_menu")],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="api_service_menu")]
            ]),
            parse_mode="HTML"
        )
        return
    
    # GET –∑–∞–ø—Ä–æ—Å –∫ API
    headers = {
        "X-Team-Token": project_token,
        "X-User-Token": worker_token,
        "Accept": "application/json"
    }
    
    print(f"[DEBUG] Headers: {headers}")
    
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            print(f"[DEBUG] Making GET request...")
            async with session.get(api_url, headers=headers) as resp:
                print(f"[DEBUG] Response status: {resp.status}")
                if resp.status == 200:
                    catalog = await resp.json()
                    print(f"[DEBUG] Catalog keys: {catalog.keys() if catalog else 'None'}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
                    user_id = callback.from_user.id
                    API_CATALOG_CACHE[user_id] = catalog
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
                    if catalog.get("sites_list"):
                        sites_list = catalog["sites_list"]
                        print(f"[DEBUG] Countries: {list(sites_list.keys())}")
                        
                        kb = []
                        for country in sorted(sites_list.keys()):
                            services_count = len(sites_list[country])
                            print(f"[DEBUG] Country: {country}, services: {services_count}")
                            kb.append([
                                types.InlineKeyboardButton(
                                    text=f"{country} ({services_count} —Å–µ—Ä–≤–∏—Å–æ–≤)",
                                    callback_data=f"api_country:{country}"
                                )
                            ])
                        
                        kb.append([
                            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="api_service_menu")
                        ])
                        
                        print(f"[DEBUG] Sending menu with {len(kb)} buttons")
                        await callback.message.edit_text(
                            "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>",
                            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
                            parse_mode="HTML"
                        )
                    else:
                        print("[DEBUG] sites_list is empty or missing")
                        await callback.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç", show_alert=True)
                else:
                    error_text = await resp.text()
                    print(f"[DEBUG] API Error response: {error_text}")
                    await callback.answer(f"–û—à–∏–±–∫–∞ API: {resp.status}", show_alert=True)
                    
    except Exception as e:
        print(f"[DEBUG] Exception: {type(e).__name__}: {str(e)}")
        import traceback
        traceback.print_exc()
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
@router.callback_query(F.data.startswith("api_country:"))
async def api_country_selected(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã —Å —ç–º–æ–¥–∑–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
    country = callback.data.split(":", 1)[1]
    print(f"[DEBUG] api_country_selected: {country}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    user_id = callback.from_user.id
    catalog = API_CATALOG_CACHE.get(user_id)
    
    print(f"[DEBUG] Catalog from cache: {bool(catalog)}")
    
    if not catalog or "sites_list" not in catalog:
        print("[DEBUG] Catalog not loaded")
        await callback.answer("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", show_alert=True)
        return
    
    services = catalog["sites_list"].get(country, [])
    print(f"[DEBUG] Services for {country}: {len(services)}")
    
    if not services:
        await callback.answer("–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤", show_alert=True)
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ —Ç–∏–ø–∞–º
    verif_services = []
    delivery_services = []
    marketplace_services = []
    bank_services = []
    other_services = []
    
    for service in services:
        name = service.get("name", "").lower()
        service_obj = service
        
        if "verif" in name:
            verif_services.append(service_obj)
        elif any(x in name for x in ["–¥–æ—Å—Ç–∞–≤–∫–∞", "post", "–ø–æ—á—Ç", "—Å–¥–µ–∫", "cdek", "dpd", "express", "cargo", "jet", "logistic"]):
            delivery_services.append(service_obj)
        elif any(x in name for x in ["bank", "–±–∞–Ω–∫", "pay", "western", "money", "korona", "halyk", "—Ö–∞–ª—ã–∫"]):
            bank_services.append(service_obj)
        elif any(x in name for x in ["olx", "krisha", "–∫—Ä—ã—à–∞", "kolesa", "lalafo", "wildberries", "ozon", "tap.az", "somon"]):
            marketplace_services.append(service_obj)
        else:
            other_services.append(service_obj)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    sorted_services = (
        verif_services + 
        marketplace_services + 
        delivery_services + 
        bank_services + 
        other_services
    )
    
    print(f"[DEBUG] Sorted services: {len(sorted_services)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å —ç–º–æ–¥–∑–∏
    kb = []
    api_settings = get_api_settings()
    current_platform_id = api_settings.get("default_platform_id")
    
    for service in sorted_services[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
        service_id = service.get("id")
        service_name = service.get("name")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
        emoji = ""
        name_lower = service_name.lower()
        if "verif" in name_lower:
            emoji = "‚úÖ "
        elif "olx" in name_lower or "lalafo" in name_lower or "tap.az" in name_lower:
            emoji = "üì¢ "
        elif "krisha" in name_lower or "–∫—Ä—ã—à–∞" in name_lower:
            emoji = "üè† "
        elif "kolesa" in name_lower:
            emoji = "üöó "
        elif any(x in name_lower for x in ["—è–Ω–¥–µ–∫—Å", "yandex"]):
            emoji = "üì¶ "
        elif any(x in name_lower for x in ["—Å–¥–µ–∫", "cdek", "—Å–¥—ç–∫", "sdek"]):
            emoji = "üìÆ "
        elif any(x in name_lower for x in ["bank", "–±–∞–Ω–∫", "pay"]):
            emoji = "üè¶ "
        elif "wildberries" in name_lower or "ozon" in name_lower:
            emoji = "üõçÔ∏è "
        elif "üÜï" in service_name:
            emoji = "üÜï "
            service_name = service_name.replace("üÜï", "").strip()
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å
        display_text = f"{emoji}{service_name}"
        if service_id == current_platform_id:
            display_text = f"‚úÖ {display_text}"
        
        kb.append([
            types.InlineKeyboardButton(
                text=display_text,
                callback_data=f"api_set_service:{service_id}"
            )
        ])
    
    if len(sorted_services) > 15:
        kb.append([
            types.InlineKeyboardButton(
                text=f"–ü–æ–∫–∞–∑–∞–Ω–æ 15 –∏–∑ {len(sorted_services)} —Å–µ—Ä–≤–∏—Å–æ–≤",
                callback_data="noop"
            )
        ])
    
    kb.append([
        types.InlineKeyboardButton(text="üîô –ö —Å—Ç—Ä–∞–Ω–∞–º", callback_data="api_catalog_select")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã
    flags = {
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "üá∞üáø", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "üá∫üáø", "–ö–∏—Ä–≥–∏–∑–∏—è": "üá∞üá¨",
        "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "üáπüáØ", "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω": "üá¶üáø", "–ê—Ä–º–µ–Ω–∏—è": "üá¶üá≤"
    }
    flag = flags.get(country, "üåç")
    
    print(f"[DEBUG] Sending menu with {len(kb)} buttons")
    await callback.message.edit_text(
        f"{flag} <b>{country}</b>\n"
        f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å ({len(services)} –¥–æ—Å—Ç—É–ø–Ω–æ):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å–µ—Ä–≤–∏—Å–∞
@router.callback_query(F.data == "api_service_menu")
async def api_service_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ (Platform, Profile, Price)"""
    await callback.answer()
    
    api_settings = get_api_settings()
    platform_id = api_settings.get("default_platform_id", 1)
    profile_id = api_settings.get("default_profile_id", None)
    price = api_settings.get("default_price", 0.11)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    service_name = "–ù–µ –≤—ã–±—Ä–∞–Ω"
    country_name = ""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
    user_id = callback.from_user.id
    catalog = API_CATALOG_CACHE.get(user_id)
    
    if catalog and "sites_list" in catalog:
        for country, services in catalog["sites_list"].items():
            for service in services:
                if service.get("id") == platform_id:
                    service_name = service.get("name", f"ID: {platform_id}")
                    country_name = country
                    break
            if service_name != "–ù–µ –≤—ã–±—Ä–∞–Ω":
                break
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_name = "–ù–µ –≤—ã–±—Ä–∞–Ω"
    if profile_id and catalog and "your_profiles" in catalog:
        for profile in catalog["your_profiles"]:
            if profile.get("id") == profile_id:
                profile_data = profile.get("data", {})
                profile_name = profile_data.get("name") or profile_data.get("fio") or f"#{profile_id}"
                break
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
        f"<b>üåç –°–µ—Ä–≤–∏—Å:</b> {service_name}"
    )
    if country_name:
        text += f" ({country_name})"
    text += f"\n<b>Platform ID:</b> <code>{platform_id}</code>\n\n"
    
    text += (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b> {profile_name}\n"
        f"<b>Profile ID:</b> <code>{profile_id if profile_id else '–Ω–µ –≤—ã–±—Ä–∞–Ω'}</code>\n\n"
        f"<b>üí∞ –¶–µ–Ω–∞:</b> <code>{price}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )
    
    kb = [
        [types.InlineKeyboardButton(text="üåç –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="api_catalog_select")],
        [types.InlineKeyboardButton(text="üë§ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="api_profiles_select")],
        [types.InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="set_api_price")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_api_settings")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
@router.callback_query(F.data.startswith("api_set_service:"))
async def api_set_service(callback: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π Platform ID"""
    platform_id = int(callback.data.split(":", 1)[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    save_api_setting("default_platform_id", platform_id)
    
    await callback.answer(f"‚úÖ Platform ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {platform_id}", show_alert=True)
    await api_service_menu(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
@router.callback_query(F.data == "set_project_token")
async def set_project_token(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üîë –í–≤–µ–¥–∏—Ç–µ <b>Project Token</b> –¥–ª—è Bastart API:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="api_tokens_menu")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(SettingsFSM.waiting_for_bastart_project_token)

@router.callback_query(F.data == "set_worker_token")
async def set_worker_token(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üîë –í–≤–µ–¥–∏—Ç–µ <b>Worker Token</b> –¥–ª—è Bastart API:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="api_tokens_menu")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(SettingsFSM.waiting_for_bastart_worker_token)

@router.message(SettingsFSM.waiting_for_bastart_project_token, F.text)
async def receive_project_token(message: types.Message, state: FSMContext):
    token = message.text.strip()
    save_api_setting("bastart_project_token", token)
    await message.answer("‚úÖ Project Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç–æ–∫–µ–Ω–æ–≤
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ö —Ç–æ–∫–µ–Ω–∞–º", callback_data="api_tokens_menu")]
    ])
    await message.answer("–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=kb)

@router.message(SettingsFSM.waiting_for_bastart_worker_token, F.text)
async def receive_worker_token(message: types.Message, state: FSMContext):
    token = message.text.strip()
    save_api_setting("bastart_worker_token", token)
    await message.answer("‚úÖ Worker Token —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear()
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ö —Ç–æ–∫–µ–Ω–∞–º", callback_data="api_tokens_menu")]
    ])
    await message.answer("–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=kb)



# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ URL - –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ë–õ–û–ö
@router.callback_query(F.data == "api_urls_menu")
async def api_urls_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ URL –∞–¥—Ä–µ—Å–æ–≤"""
    await callback.answer()
    
    api_settings = get_api_settings()
    api_url = api_settings.get("bastart_api_url", "https://web-api.bdev.su/")
    shortener_url = api_settings.get("shortener_api_url", "http://193.233.112.8/api/shorten")
    
    text = (
        "üåê <b>URL-–∞–¥—Ä–µ—Å–∞ API</b>\n\n"
        f"<b>Bastart API:</b>\n<code>{api_url}</code>\n\n"
        f"<b>Shortener API:</b>\n<code>{shortener_url}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ URL –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )
    
    kb = [
        [types.InlineKeyboardButton(text="üìù Bastart API URL", callback_data="set_api_url")],
        [types.InlineKeyboardButton(text="üìù Shortener URL", callback_data="set_shortener_url")],
        [types.InlineKeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ", callback_data="reset_api_urls")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_api_settings")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ URL
@router.callback_query(F.data == "set_api_url")
async def set_api_url(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üåê –í–≤–µ–¥–∏—Ç–µ <b>URL Bastart API</b>:\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://web-api.bdev.su/",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="api_urls_menu")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(SettingsFSM.waiting_for_api_url)

@router.callback_query(F.data == "set_shortener_url")
async def set_shortener_url(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "üåê –í–≤–µ–¥–∏—Ç–µ <b>URL Shortener API</b>:\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://193.233.112.8/api/shorten",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="api_urls_menu")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(SettingsFSM.waiting_for_shortener_url)

@router.message(SettingsFSM.waiting_for_api_url, F.text)
async def receive_api_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    if not url.endswith("/"):
        url += "/"
    save_api_setting("bastart_api_url", url)
    await message.answer(f"‚úÖ Bastart API URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear()
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ö URL", callback_data="api_urls_menu")]
    ])
    await message.answer("URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=kb)

@router.message(SettingsFSM.waiting_for_shortener_url, F.text)
async def receive_shortener_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    save_api_setting("shortener_api_url", url)
    await message.answer(f"‚úÖ Shortener URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear()
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ö URL", callback_data="api_urls_menu")]
    ])
    await message.answer("URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=kb)

# –°–±—Ä–æ—Å URL –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
@router.callback_query(F.data == "reset_api_urls")
async def reset_api_urls(callback: types.CallbackQuery):
    save_api_setting("bastart_api_url", "https://web-api.bdev.su/")
    save_api_setting("shortener_api_url", "http://193.233.112.8/api/shorten")
    await callback.answer("‚úÖ URL —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ", show_alert=True)
    await api_urls_menu(callback)



# –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ set_api_price –Ω–∞ –≤–µ—Ä—Å–∏—é —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
@router.callback_query(F.data == "set_api_price")
async def set_api_price(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ü–µ–Ω—ã –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–æ–¥ —Å–≤–æ–µ–π"""
    await callback.answer()
    
    api_settings = get_api_settings()
    current_price = api_settings.get("default_price", 0.11)
    
    # –ü—Ä–µ—Å–µ—Ç—ã —Ü–µ–Ω
    presets = [0.10, 0.11, 0.50, 1.00, 5.00, 10.00]
    
    kb = []
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Å–µ—Ç—ã
    row = []
    for price in presets:
        mark = "‚úÖ " if price == current_price else ""
        row.append(
            types.InlineKeyboardButton(
                text=f"{mark}{price:.2f}",
                callback_data=f"api_price_preset:{price}"
            )
        )
        if len(row) == 3:
            kb.append(row)
            row = []
    if row:
        kb.append(row)
    
    kb.append([
        types.InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ü–µ–Ω—É", callback_data="api_price_custom")
    ])
    kb.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="api_service_menu")
    ])
    
    await callback.message.edit_text(
        f"üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{current_price}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–Ω—ã
@router.callback_query(F.data.startswith("api_price_preset:"))
async def api_price_preset(callback: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞"""
    price = float(callback.data.split(":", 1)[1])
    save_api_setting("default_price", price)
    await callback.answer(f"‚úÖ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", show_alert=True)
    await api_service_menu(callback)

@router.callback_query(F.data == "api_price_custom")
async def api_price_custom(callback: types.CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ —Å–≤–æ–µ–π —Ü–µ–Ω—ã"""
    await callback.answer()
    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.11 –∏–ª–∏ 5.50):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="set_api_price")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(SettingsFSM.waiting_for_price)

@router.message(SettingsFSM.waiting_for_price, F.text)
async def receive_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip().replace(",", "."))
        save_api_setting("default_price", price)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}")
        await state.clear()
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–µ—Ä–≤–∏—Å–∞", callback_data="api_service_menu")]
        ])
        await message.answer("–ì–æ—Ç–æ–≤–æ", reply_markup=kb)
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.11).")



# –¢–µ—Å—Ç API
@router.callback_query(F.data == "api_test")
async def api_test(callback: types.CallbackQuery):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"""
    await callback.answer("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    api_settings = get_api_settings()
    
    # –¢–µ—Å—Ç Bastart API
    headers = {
        "X-Team-Token": api_settings.get("bastart_project_token", ""),
        "X-User-Token": api_settings.get("bastart_worker_token", ""),
        "Content-Type": "application/json"
    }
    
    data = {
        "platform_id": api_settings.get("default_platform_id", 1),
        "profile_id": api_settings.get("default_profile_id", 379783),
        "title": "Test",
        "price": api_settings.get("default_price", 0.11)
    }
    
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                api_settings.get("bastart_api_url", "https://web-api.bdev.su/"),
                headers=headers,
                json=data
            ) as resp:
                if resp.status == 201:
                    result = await resp.json()
                    text = (
                        "‚úÖ <b>API —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n\n"
                        f"–¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{result.get('link', '–Ω–µ—Ç —Å—Å—ã–ª–∫–∏')}</code>"
                    )
                else:
                    error_text = await resp.text()
                    text = f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {resp.status}\n{error_text[:200]}"
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    kb = [[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_api_settings")]]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )

# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ test_api_settings –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.callback_query(F.data == "test_api_settings")
async def test_api_settings(callback: types.CallbackQuery):
    await api_test(callback)

# ============= –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö API =============

@router.callback_query(F.data == "open_autostart_settings")
async def open_autostart_settings(callback: types.CallbackQuery):
    await callback.answer()
    s = get_settings()
    await callback.message.edit_text(build_autostart_caption(s), reply_markup=get_autostart_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "open_fingerprint_settings")
async def open_fingerprint_settings(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text(build_fingerprint_caption(s), reply_markup=get_fingerprint_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "back_to_fingerprint")
async def back_to_fingerprint(callback: types.CallbackQuery):
    await open_fingerprint_settings(callback)

@router.callback_query(F.data == "noop")
async def noop(callback: types.CallbackQuery):
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è User-Agents
def _save_user_agents(lines: List[str]) -> int:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ User-Agents"""
    ua_file = "user_agents.json"
    unique_agents = []
    
    for line in lines:
        line = line.strip()
        if line and len(line) > 10 and line not in unique_agents:
            unique_agents.append(line)
    
    if unique_agents:
        try:
            with open(ua_file, 'w', encoding='utf-8') as f:
                json.dump(unique_agents, f, ensure_ascii=False, indent=2)
            
            set_setting("ua_source", "file")
            set_setting("ua_count", len(unique_agents))
        except Exception as e:
            print(f"Error saving user agents: {e}")
            return 0
    
    return len(unique_agents)

# –û–±—â–∏–µ —Ç—É–º–±–ª–µ—Ä—ã
@router.callback_query(F.data == "toggle_browser_visible")
async def toggle_browser_visible(callback: types.CallbackQuery):
    s = get_settings(); s['browser_visible'] = not s.get('browser_visible', False)
    set_setting('browser_visible', s['browser_visible'])
    await callback.answer(f"–í–∏–¥–∏–º–æ—Å—Ç—å: {'–í–∫–ª—é—á–µ–Ω–∞' if s['browser_visible'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))

@router.callback_query(F.data == "toggle_without_proxy")
async def toggle_without_proxy(callback: types.CallbackQuery):
    s = get_settings(); s['without_proxy'] = not s.get('without_proxy', False)
    set_setting('without_proxy', s['without_proxy'])
    await callback.answer(f"–ë–µ–∑ –ø—Ä–æ–∫—Å–∏: {'–í–∫–ª' if s['without_proxy'] else '–í—ã–∫–ª'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))

@router.callback_query(F.data == "toggle_without_accounts")
async def toggle_without_accounts(callback: types.CallbackQuery):
    s = get_settings(); s['without_accounts'] = not s.get('without_accounts', False)
    set_setting('without_accounts', s['without_accounts'])
    await callback.answer(f"–ë–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {'–í–∫–ª' if s['without_accounts'] else '–í—ã–∫–ª'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))

@router.callback_query(F.data == "toggle_text_rotation")
async def toggle_text_rotation(callback: types.CallbackQuery):
    s = get_settings()
    s['text_rotation'] = not s.get('text_rotation', False)
    set_setting('text_rotation', s['text_rotation'])
    await callback.answer(f"–†–æ—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤: {'–í–∫–ª' if s['text_rotation'] else '–í—ã–∫–ª'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
@router.callback_query(F.data == "set_autostart_timer")
async def set_autostart_timer(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):", reply_markup=get_back_menu())
    await state.set_state(SettingsFSM.waiting_for_timer)

@router.callback_query(F.data.startswith("set_autostart_preset:"))
async def set_autostart_preset(callback: types.CallbackQuery):
    _, val = callback.data.split(":", 1)
    secs = int(val) if val.isdigit() else 0
    set_setting("autostart_timer", secs if secs > 0 else None)
    await callback.answer(f"–¢–∞–π–º–µ—Ä: {secs if secs > 0 else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    s = get_settings()
    await callback.message.edit_text(build_autostart_caption(s), reply_markup=get_autostart_menu(s), parse_mode="HTML")
    try:
        import handlers.main_menu as main_menu_module
        await main_menu_module.restart_auto_start_timer(callback.bot)
    except Exception as e:
        print(f"[SETTINGS] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")

@router.message(SettingsFSM.waiting_for_timer, F.text)
async def receive_timer(message: types.Message, state: FSMContext, bot: Bot):
    try:
        timer = int(message.text.strip())
        set_setting('autostart_timer', timer if timer > 0 else None)
        s = get_settings()
        await message.answer(build_autostart_caption(s), reply_markup=get_autostart_menu(s), parse_mode="HTML")
        try:
            import handlers.main_menu as main_menu_module
            await main_menu_module.restart_auto_start_timer(bot)
        except Exception as e:
            print(f"[SETTINGS] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.clear()

# –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç ‚Äî UA/Resolutions
@router.callback_query(F.data == "toggle_ua_source")
async def toggle_ua_source(callback: types.CallbackQuery):
    s = get_settings(); current = s.get("ua_source", "random")
    new_val = "file" if current != "file" else "random"
    set_setting("ua_source", new_val)
    await callback.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ UA: {'—Ñ–∞–π–ª' if new_val == 'file' else '—Ä–∞–Ω–¥–æ–º'}")
    s = get_settings()
    await callback.message.edit_text(build_fingerprint_caption(s), reply_markup=get_fingerprint_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "upload_ua_file")
async def upload_ua_file(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª –∏–ª–∏ —Å–ø–∏—Å–æ–∫ UA —Ç–µ–∫—Å—Ç–æ–º.")
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª —Å User-Agent (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_menu())
    await state.set_state(SettingsFSM.waiting_for_ua_file)

@router.message(SettingsFSM.waiting_for_ua_file, F.document)
async def receive_ua_file_document(message: types.Message, state: FSMContext):
    doc = message.document
    if not doc or (doc.file_name and not doc.file_name.lower().endswith(".txt")):
        await message.answer("–ù—É–∂–µ–Ω .txt —Ñ–∞–π–ª.")
        return
    buf = io.BytesIO()
    await message.bot.download(doc, destination=buf)
    buf.seek(0)
    content = buf.read().decode("utf-8", errors="ignore")
    lines = [l.strip() for l in content.splitlines()]
    count = _save_user_agents(lines)
    await message.answer(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UA: {count}", reply_markup=get_fingerprint_menu(get_settings()), parse_mode="HTML")
    await state.clear()

@router.message(SettingsFSM.waiting_for_ua_file, F.text)
async def receive_ua_file_text(message: types.Message, state: FSMContext):
    lines = [l.strip() for l in message.text.splitlines()]
    count = _save_user_agents(lines)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UA: {count}", reply_markup=get_fingerprint_menu(get_settings()), parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "toggle_random_resolution")
async def toggle_random_resolution(callback: types.CallbackQuery):
    s = get_settings(); flag = not s.get("random_resolution", True)
    set_setting("random_resolution", flag)
    await callback.answer(f"–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {'–≤–∫–ª' if flag else '–≤—ã–∫–ª'}")
    s = get_settings()
    await callback.message.edit_text(build_fingerprint_caption(s), reply_markup=get_fingerprint_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "open_resolution_menu")
async def open_resolution_menu(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞</b>\n–ü–ö-–ø—Ä–µ—Å–µ—Ç—ã (‚â•1440√ó900) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë.", reply_markup=get_resolution_menu(s.get("screen_resolution"), s.get("random_resolution", True)), parse_mode="HTML")

@router.callback_query(F.data.startswith("set_resolution:"))
async def set_resolution(callback: types.CallbackQuery):
    _, value = callback.data.split(":", 1)
    if value == "random":
        set_setting("random_resolution", True); set_setting("screen_resolution", None)
        await callback.answer("–†–µ–∂–∏–º —Ä–∞–Ω–¥–æ–º–∞ –≤–∫–ª—é—á—ë–Ω.")
    else:
        if not re.fullmatch(r"\d{2,4}x\d{2,4}", value):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        set_setting("random_resolution", False); set_setting("screen_resolution", value)
        await callback.answer(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {value}")
    s = get_settings()
    await callback.message.edit_text("<b>–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞</b>\n–ü–ö-–ø—Ä–µ—Å–µ—Ç—ã (‚â•1440√ó900) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë.", reply_markup=get_resolution_menu(s.get("screen_resolution"), s.get("random_resolution", True)), parse_mode="HTML")

@router.callback_query(F.data == "enter_custom_resolution")
async def enter_custom_resolution(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –®x–í, –Ω–∞–ø—Ä–∏–º–µ—Ä 1920x1080", reply_markup=get_back_menu())
    await state.set_state(SettingsFSM.waiting_for_custom_resolution)

@router.message(SettingsFSM.waiting_for_custom_resolution, F.text)
async def receive_custom_resolution(message: types.Message, state: FSMContext):
    text = message.text.strip().lower().replace(" ", "")
    m = re.fullmatch(r"(\d{2,4})x(\d{2,4})", text)
    if not m:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1920x1080")
        return
    w, h = int(m.group(1)), int(m.group(2))
    set_setting("random_resolution", False); set_setting("screen_resolution", f"{w}x{h}")
    await message.answer("üïµÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç", reply_markup=get_fingerprint_menu(get_settings()), parse_mode="HTML")
    await state.clear()

# –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç ‚Äî –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
@router.callback_query(F.data == "open_hardware_settings")
async def open_hardware_settings(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text("üß† <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b>\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ GPU/—à—É–º—ã/–ø–ª–∞—Ç—Ñ–æ—Ä–º—É/CPU/–ø–∞–º—è—Ç—å.", reply_markup=get_hardware_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "toggle_hw_source")
async def toggle_hw_source(callback: types.CallbackQuery):
    s = get_settings(); cur = s.get("hw_source", "auto")
    newv = "custom" if cur == "auto" else "auto"
    set_setting("hw_source", newv)
    await callback.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {newv}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_gpu_vendor")
async def cycle_hw_gpu_vendor(callback: types.CallbackQuery):
    order = ["auto", "Intel", "NVIDIA", "AMD", "Apple"]
    s = get_settings(); cur = s.get("hw_gpu_vendor", "auto")
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "Intel"
    set_setting("hw_gpu_vendor", nxt)
    set_setting("hw_gpu_model", "auto")
    await callback.answer(f"GPU –≤–µ–Ω–¥–æ—Ä: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_gpu_model")
async def cycle_hw_gpu_model(callback: types.CallbackQuery):
    from utils.device_profiles import GPU_MODELS
    s = get_settings()
    vendor = s.get("hw_gpu_vendor", "auto")
    if vendor == "auto":
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–¥–æ—Ä–∞.")
        return
    models = ["auto"] + (GPU_MODELS.get(vendor, []) or [])
    cur = s.get("hw_gpu_model", "auto")
    try:
        idx = models.index(cur)
    except ValueError:
        idx = 0
    nxt = models[(idx + 1) % len(models)]
    set_setting("hw_gpu_model", nxt)
    await callback.answer(f"–ú–æ–¥–µ–ª—å: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_noise")
async def cycle_hw_noise(callback: types.CallbackQuery):
    order = ["low", "medium", "high"]
    s = get_settings(); cur = s.get("hw_noise_level", "medium")
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "medium"
    set_setting("hw_noise_level", nxt)
    await callback.answer(f"–®—É–º: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_hc")
async def cycle_hw_hc(callback: types.CallbackQuery):
    order = ["auto", "8", "12", "16", "20"]
    s = get_settings(); cur = str(s.get("hw_hc", "auto"))
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "8"
    set_setting("hw_hc", None if nxt == "auto" else int(nxt))
    await callback.answer(f"CPU threads: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_mem")
async def cycle_hw_mem(callback: types.CallbackQuery):
    order = ["auto", "8", "16", "32"]
    s = get_settings(); cur = str(s.get("hw_mem", "auto"))
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "16"
    set_setting("hw_mem", None if nxt == "auto" else int(nxt))
    await callback.answer(f"Memory: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_platform")
async def cycle_hw_platform(callback: types.CallbackQuery):
    order = ["auto", "Win32", "MacIntel"]
    s = get_settings(); cur = s.get("hw_platform_override", "auto")
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "Win32"
    set_setting("hw_platform_override", nxt)
    await callback.answer(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "toggle_hw_mtp")
async def toggle_hw_mtp(callback: types.CallbackQuery):
    s = get_settings(); cur = int(s.get("hw_max_touch_points", 0) or 0)
    nxt = 0 if cur != 0 else 1
    set_setting("hw_max_touch_points", nxt)
    await callback.answer(f"maxTouchPoints: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_cdepth")
async def cycle_hw_cdepth(callback: types.CallbackQuery):
    order = [24, 30]
    s = get_settings(); cur = int(s.get("hw_color_depth", 24) or 24)
    nxt = order[(order.index(cur) + 1) % len(order)]
    set_setting("hw_color_depth", int(nxt))
    await callback.answer(f"ColorDepth: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))