from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def _on_off(flag: bool, on: str = "‚úÖ –í–∫–ª", off: str = "‚ùå –í—ã–∫–ª") -> str:
    return on if flag else off

def get_settings_menu(settings: dict) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–æ–π API"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
    api_configured = False
    api_emoji = "‚ùå"
    
    try:
        import json
        import os
        if os.path.exists('settings.json'):
            with open('settings.json', 'r', encoding='utf-8') as f:
                saved_settings = json.load(f)
                api_settings = saved_settings.get("api_settings", {})
                if api_settings.get("bastart_project_token") and api_settings.get("bastart_worker_token"):
                    api_configured = True
                    api_emoji = "‚úÖ"
    except:
        pass
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üïµÔ∏è –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç", callback_data="open_fingerprint_settings")],
            [InlineKeyboardButton(text="‚öôÔ∏è –û–±—â–∏–µ", callback_data="open_common_settings")],
            [InlineKeyboardButton(text=f"üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", callback_data="open_api_settings")],
            [InlineKeyboardButton(text="‚è± –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", callback_data="open_autostart_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )

def get_common_menu(settings: dict) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"–í–∏–¥–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞: {'üëÅÔ∏è –í–∏–¥–∏–º' if settings.get('browser_visible', False) else 'üôà –°–∫—Ä—ã—Ç'}", 
                callback_data="toggle_browser_visible"
            )],
            [InlineKeyboardButton(
                text=f"–†–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {_on_off(settings.get('without_proxy', False))}", 
                callback_data="toggle_without_proxy"
            )],
            [InlineKeyboardButton(
                text=f"–†–∞–±–æ—Ç–∞ –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {_on_off(settings.get('without_accounts', False))}", 
                callback_data="toggle_without_accounts"
            )],
            [InlineKeyboardButton(
                text=f"–†–æ—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤: {_on_off(settings.get('text_rotation', False))}",
                callback_data="toggle_text_rotation"
            )],
            [InlineKeyboardButton(text="üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back_root")],
        ]
    )

def get_autostart_menu(settings: dict) -> InlineKeyboardMarkup:
    timer = settings.get("autostart_timer")
    timer_text = f"{timer} —Å–µ–∫." if timer else "–û—Ç–∫–ª—é—á–µ–Ω"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–¢–µ–∫—É—â–µ–µ: {timer_text}", callback_data="noop")],
            [
                InlineKeyboardButton(text="5 –º–∏–Ω", callback_data="set_autostart_preset:300"),
                InlineKeyboardButton(text="10 –º–∏–Ω", callback_data="set_autostart_preset:600"),
                InlineKeyboardButton(text="15 –º–∏–Ω", callback_data="set_autostart_preset:900"),
            ],
            [
                InlineKeyboardButton(text="30 –º–∏–Ω", callback_data="set_autostart_preset:1800"),
                InlineKeyboardButton(text="45 –º–∏–Ω", callback_data="set_autostart_preset:2700"),
                InlineKeyboardButton(text="60 –º–∏–Ω", callback_data="set_autostart_preset:3600"),
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="set_autostart_preset:0")],
            [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="set_autostart_timer")],
            [InlineKeyboardButton(text="üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back_root")],
        ]
    )

def get_fingerprint_menu(settings: dict) -> InlineKeyboardMarkup:
    ua_source = settings.get("ua_source", "random")
    ua_count = int(settings.get("ua_count", 0))
    random_res = settings.get("random_resolution", True)
    screen_res = settings.get("screen_resolution")
    hw_src = settings.get("hw_source", "auto")
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üß© USER AGENT", callback_data="noop")],
            [
                InlineKeyboardButton(
                    text=f"–ò—Å—Ç–æ—á–Ω–∏–∫: {'üìÅ –§–∞–π–ª' if ua_source == 'file' else 'üé≤ –†–∞–Ω–¥–æ–º'}", 
                    callback_data="toggle_ua_source"
                ),
                InlineKeyboardButton(
                    text=f"–ó–∞–≥—Ä—É–∑–∏—Ç—å .txt (—Å–µ–π—á–∞—Å: {ua_count})", 
                    callback_data="upload_ua_file"
                ),
            ],
            [InlineKeyboardButton(text="üñ• –†–ê–ó–†–ï–®–ï–ù–ò–ï –≠–ö–†–ê–ù–ê", callback_data="noop")],
            [
                InlineKeyboardButton(
                    text=f"–†–∞–Ω–¥–æ–º–Ω–æ–µ: {_on_off(random_res)}", 
                    callback_data="toggle_random_resolution"
                ),
                InlineKeyboardButton(
                    text=f"–í—ã–±–æ—Ä: {screen_res if (screen_res and not random_res) else 'üé≤ –†–∞–Ω–¥–æ–º'}", 
                    callback_data="open_resolution_menu"
                ),
            ],
            [InlineKeyboardButton(text="üß† –£–°–¢–†–û–ô–°–¢–í–û", callback_data="noop")],
            [InlineKeyboardButton(
                text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {'üß† –ê–≤—Ç–æ' if hw_src=='auto' else '‚úçÔ∏è –ö–∞—Å—Ç–æ–º'}", 
                callback_data="open_hardware_settings"
            )],
            [InlineKeyboardButton(text="üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back_root")],
        ]
    )

def get_hardware_menu(settings: dict) -> InlineKeyboardMarkup:
    src = settings.get("hw_source", "auto")  # auto | custom
    vendor = settings.get("hw_gpu_vendor", "auto")
    model = settings.get("hw_gpu_model", "auto")
    noise = settings.get("hw_noise_level", "medium")  # low|medium|high
    hc = settings.get("hw_hc") or "auto"
    mem = settings.get("hw_mem") or "auto"
    plat = settings.get("hw_platform_override", "auto")  # auto|Win32|MacIntel
    mtp = settings.get("hw_max_touch_points", 0)
    cdepth = settings.get("hw_color_depth", 24)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    noise_display = {"low": "–ù–∏–∑–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "high": "–í—ã—Å–æ–∫–∏–π"}.get(noise, noise)
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è: {'üß† –ê–≤—Ç–æ' if src=='auto' else '‚úçÔ∏è –ö–∞—Å—Ç–æ–º'}", 
                callback_data="toggle_hw_source"
            )],
            [
                InlineKeyboardButton(text=f"GPU –≤–µ–Ω–¥–æ—Ä: {vendor}", callback_data="cycle_hw_gpu_vendor"),
                InlineKeyboardButton(text=f"–ú–æ–¥–µ–ª—å: {model[:12]+'...' if len(str(model)) > 12 else model}", callback_data="cycle_hw_gpu_model"),
            ],
            [
                InlineKeyboardButton(text=f"–®—É–º: {noise_display}", callback_data="cycle_hw_noise"),
                InlineKeyboardButton(text=f"CPU: {hc} –ø–æ—Ç–æ–∫–æ–≤", callback_data="cycle_hw_hc"),
            ],
            [
                InlineKeyboardButton(text=f"RAM: {mem} GB", callback_data="cycle_hw_mem"),
                InlineKeyboardButton(text=f"OS: {plat}", callback_data="cycle_hw_platform"),
            ],
            [
                InlineKeyboardButton(text=f"TouchPoints: {mtp}", callback_data="toggle_hw_mtp"),
                InlineKeyboardButton(text=f"ColorDepth: {cdepth}", callback_data="cycle_hw_cdepth"),
            ],
            [InlineKeyboardButton(text="üîô –í –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç", callback_data="back_to_fingerprint")],
        ]
    )

def get_resolution_menu(current: str | None, random_enabled: bool = True) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
    presets = [
        "2560x1440",  # 2K
        "1920x1200",  # WUXGA
        "1920x1080",  # Full HD
        "1680x1050",  # WSXGA+
        "1600x900",   # HD+
        "1440x900"    # WXGA+
    ]
    
    rows = []
    
    # –ö–Ω–æ–ø–∫–∞ —Ä–∞–Ω–¥–æ–º–∞
    random_mark = "‚úÖ " if random_enabled else ""
    rows.append([InlineKeyboardButton(
        text=f"{random_mark}üé≤ –†–∞–Ω–¥–æ–º –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –ü–ö", 
        callback_data="set_resolution:random"
    )])
    
    # –ü—Ä–µ—Å–µ—Ç—ã –ø–æ 2 –≤ —Ä—è–¥—É
    row = []
    for idx, res in enumerate(presets, start=1):
        mark = "‚úÖ " if (current == res and not random_enabled) else ""
        row.append(InlineKeyboardButton(
            text=f"{mark}{res}", 
            callback_data=f"set_resolution:{res}"
        ))
        if idx % 2 == 0:
            rows.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        rows.append(row)
    
    # –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    rows.append([InlineKeyboardButton(
        text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë (–®x–í)", 
        callback_data="enter_custom_resolution"
    )])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_fingerprint")])
    
    return InlineKeyboardMarkup(inline_keyboard=rows)

def get_back_menu() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )

# ============= –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø API =============

def get_api_main_menu(is_configured: bool) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
    kb = [
        [InlineKeyboardButton(text="üîë –¢–æ–∫–µ–Ω—ã Bastart", callback_data="api_tokens_menu")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞", callback_data="api_service_menu")],
        [InlineKeyboardButton(text="üåê URL –∞–¥—Ä–µ—Å–∞", callback_data="api_urls_menu")],
    ]
    
    if is_configured:
        kb.append([InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç API", callback_data="api_test")])
    
    kb.append([InlineKeyboardButton(text="üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back_root")])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_api_settings_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ API (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ open_api_settings)"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåç –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É/—Å–µ—Ä–≤–∏—Å", callback_data="api_selector_settings")],
            [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç API", callback_data="test_api_settings")],
            [InlineKeyboardButton(text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–æ—â–∞–¥–∫–∞–º", callback_data="work_platforms")],
            [InlineKeyboardButton(text="üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back_root")]
        ]
    )

def get_api_error_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ API"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö –ø–ª–æ—â–∞–¥–∫–∞–º", callback_data="work_platforms")],
            [InlineKeyboardButton(text="üîô –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_back_root")]
        ]
    )