# bot.py
import asyncio
import logging
import sys
import contextlib
from stop import AllowListMiddleware
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

logging.getLogger('aiogram.dispatcher').setLevel(logging.CRITICAL)
logging.getLogger('aiogram').setLevel(logging.CRITICAL)
logging.getLogger('asyncio').setLevel(logging.CRITICAL)

logging.basicConfig(level=logging.WARNING, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

from handlers.main_menu import router as main_router, cmd_start  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é cmd_start
from handlers.proxy_accounts import router as proxy_accounts_router
# from handlers.platforms import router as platforms_router  # –£–î–ê–õ–ï–ù–û: –ø–æ–¥–∫–ª—é—á–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ main_menu
from handlers.settings import router as settings_router
from config import BOT_TOKEN, ADMIN_IDS
from db import init_db

# --- –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ ---
import handlers.main_menu as main_menu_module
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---


async def on_startup(bot: Bot):
    startup_text = (
        "‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n"
        "üü¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n"
        "üìÖ <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> <code>{}</code>\n"
        "ü§ñ <b>–í–µ—Ä—Å–∏—è:</b> <code>2.1.1</code>\n\n"
        "üí° –ù–∞—á–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é:"
    )

    from datetime import datetime
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    text = startup_text.format(current_time)

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(chat_id=admin_id, text=text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
    # --- –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
    try:
        await main_menu_module.restart_auto_start_timer(bot)
        print("üöÄ –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---


async def on_shutdown(bot: Bot):
    shutdown_text = (
        "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n"
        "üî¥ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
        "üìÖ <b>–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</b> <code>{}</code>"
    )

    from datetime import datetime
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    text = shutdown_text.format(current_time)

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(chat_id=admin_id, text=text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            try:
                import requests
                url = f"https://api.telegram.org/bot{bot.token}/sendMessage"
                data = {
                    "chat_id": admin_id,
                    "text": "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API)",
                    "parse_mode": "HTML"
                }
                requests.post(url, data=data)
            except Exception as api_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ API –¥–ª—è {admin_id}: {api_error}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
async def handle_start_command(message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        logger.warning(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM —Å–±—Ä–æ—à–µ–Ω–æ –∏–∑-–∑–∞ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    await cmd_start(message, state)

async def main():
    try:
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        bot = Bot(token=BOT_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        dp.message.middleware(AllowListMiddleware())
        dp.callback_query.middleware(AllowListMiddleware())

        dp.message.register(handle_start_command, F.text == "/start")

        dp.include_router(main_router)
        dp.include_router(proxy_accounts_router)
        # dp.include_router(platforms_router)  # –£–î–ê–õ–ï–ù–û: —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –≤–Ω—É—Ç—Ä–∏ main_menu
        dp.include_router(settings_router)

        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)

        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        try:
            temp_bot = Bot(token=BOT_TOKEN)
            error_msg = f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}"
            for admin_id in ADMIN_IDS:
                try:
                    await temp_bot.send_message(chat_id=admin_id, text=error_msg)
                except:
                    pass
            await temp_bot.session.close()
        except:
            pass
    finally:
        print("üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    with contextlib.suppress(KeyboardInterrupt):
        asyncio.run(main())