from __future__ import annotations

import io
import re
from typing import List

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db import get_settings, set_setting
from keyboards.settings import (
    get_settings_menu,
    get_common_menu,
    get_autostart_menu,
    get_fingerprint_menu,
    get_resolution_menu,
    get_hardware_menu,
    get_back_menu,
)

router = Router()
router.event_types = {"message", "callback_query"}

class SettingsFSM(StatesGroup):
    waiting_for_timer = State()
    waiting_for_ua_file = State()
    waiting_for_custom_resolution = State()

def build_root_caption(s: dict) -> str:
    visible = "üëÅÔ∏è –í–∏–¥–∏–º" if s.get("browser_visible") else "üôà –°–∫—Ä—ã—Ç"
    no_proxy = "‚úÖ" if s.get("without_proxy") else "‚ùå"
    no_acc = "‚úÖ" if s.get("without_accounts") else "‚ùå"
    timer = s.get("autostart_timer")
    timer_txt = f"{timer} —Å–µ–∫." if timer else "–û—Ç–∫–ª—é—á–µ–Ω"
    ua_source = s.get("ua_source", "random")
    ua_count = int(s.get("ua_count", 0))
    ua_txt = "üé≤ –†–∞–Ω–¥–æ–º" if ua_source != "file" else f"üìÅ –§–∞–π–ª ({ua_count})"
    res_txt = s.get("screen_resolution") if (s.get("screen_resolution") and not s.get("random_resolution", True)) else "üé≤ –†–∞–Ω–¥–æ–º (–ü–ö ‚â•1440√ó900)"
    hw_src = s.get("hw_source", "auto")
    return (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üïµÔ∏è <b>–ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç</b>\n"
        f"‚Ä¢ UA: <code>{ua_txt}</code>\n"
        f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: <code>{res_txt}</code>\n"
        f"‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <code>{'–ê–≤—Ç–æ' if hw_src=='auto' else '–ö–∞—Å—Ç–æ–º'}</code>\n\n"
        "‚öôÔ∏è <b>–û–±—â–∏–µ</b>\n"
        f"‚Ä¢ –í–∏–¥–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞: <code>{visible}</code>\n"
        f"‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏: <code>{no_proxy}</code> | –ë–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <code>{no_acc}</code>\n\n"
        "‚è± <b>–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫</b>\n"
        f"‚Ä¢ –¢–∞–π–º–µ—Ä: <code>{timer_txt}</code>"
    )

def build_autostart_caption(s: dict) -> str:
    t = s.get("autostart_timer")
    ttxt = f"{t} —Å–µ–∫." if t else "–û—Ç–∫–ª—é—á–µ–Ω"
    return "‚è± <b>–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫</b>\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.".format(ttxt)

def build_fingerprint_caption(s: dict) -> str:
    ua_source = s.get("ua_source", "random")
    ua_count = int(s.get("ua_count", 0))
    ua_txt = "üé≤ –†–∞–Ω–¥–æ–º" if ua_source != "file" else f"üìÅ –§–∞–π–ª ({ua_count})"
    res_txt = s.get("screen_resolution") if (s.get("screen_resolution") and not s.get("random_resolution", True)) else "üé≤ –†–∞–Ω–¥–æ–º (–ü–ö ‚â•1440√ó900)"
    hw_src = s.get("hw_source", "auto")
    return (
        "üïµÔ∏è <b>–ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç</b>\n"
        f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ UA: <code>{ua_txt}</code>\n"
        f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: <code>{res_txt}</code>\n"
        f"‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <code>{'–ê–≤—Ç–æ' if hw_src=='auto' else '–ö–∞—Å—Ç–æ–º'}</code>\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª UA / –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."
    )

@router.callback_query(F.data == "settings")
async def show_settings(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text(build_root_caption(s), reply_markup=get_settings_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "settings_back_root")
async def settings_back_root(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text(build_root_caption(s), reply_markup=get_settings_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "open_common_settings")
async def open_common_settings(callback: types.CallbackQuery):
    await callback.answer()
    s = get_settings()
    await callback.message.edit_text("‚öôÔ∏è <b>–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å:", reply_markup=get_common_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "open_autostart_settings")
async def open_autostart_settings(callback: types.CallbackQuery):
    await callback.answer()
    s = get_settings()
    await callback.message.edit_text(build_autostart_caption(s), reply_markup=get_autostart_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "open_fingerprint_settings")
async def open_fingerprint_settings(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text(build_fingerprint_caption(s), reply_markup=get_fingerprint_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "back_to_fingerprint")
async def back_to_fingerprint(callback: types.CallbackQuery):
    await open_fingerprint_settings(callback)

@router.callback_query(F.data == "noop")
async def noop(callback: types.CallbackQuery):
    await callback.answer()

# –û–±—â–∏–µ —Ç—É–º–±–ª–µ—Ä—ã
@router.callback_query(F.data == "toggle_browser_visible")
async def toggle_browser_visible(callback: types.CallbackQuery):
    s = get_settings(); s['browser_visible'] = not s.get('browser_visible', False)
    set_setting('browser_visible', s['browser_visible'])
    await callback.answer(f"–í–∏–¥–∏–º–æ—Å—Ç—å: {'–í–∫–ª—é—á–µ–Ω–∞' if s['browser_visible'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))

@router.callback_query(F.data == "toggle_without_proxy")
async def toggle_without_proxy(callback: types.CallbackQuery):
    s = get_settings(); s['without_proxy'] = not s.get('without_proxy', False)
    set_setting('without_proxy', s['without_proxy'])
    await callback.answer(f"–ë–µ–∑ –ø—Ä–æ–∫—Å–∏: {'–í–∫–ª' if s['without_proxy'] else '–í—ã–∫–ª'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))

@router.callback_query(F.data == "toggle_without_accounts")
async def toggle_without_accounts(callback: types.CallbackQuery):
    s = get_settings(); s['without_accounts'] = not s.get('without_accounts', False)
    set_setting('without_accounts', s['without_accounts'])
    await callback.answer(f"–ë–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {'–í–∫–ª' if s['without_accounts'] else '–í—ã–∫–ª'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
@router.callback_query(F.data == "set_autostart_timer")
async def set_autostart_timer(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):", reply_markup=get_back_menu())
    await state.set_state(SettingsFSM.waiting_for_timer)

@router.callback_query(F.data.startswith("set_autostart_preset:"))
async def set_autostart_preset(callback: types.CallbackQuery):
    _, val = callback.data.split(":", 1)
    secs = int(val) if val.isdigit() else 0
    set_setting("autostart_timer", secs if secs > 0 else None)
    await callback.answer(f"–¢–∞–π–º–µ—Ä: {secs if secs > 0 else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    s = get_settings()
    await callback.message.edit_text(build_autostart_caption(s), reply_markup=get_autostart_menu(s), parse_mode="HTML")
    try:
        import handlers.main_menu as main_menu_module
        await main_menu_module.restart_auto_start_timer(callback.bot)
    except Exception as e:
        print(f"[SETTINGS] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")

@router.message(SettingsFSM.waiting_for_timer, F.text)
async def receive_timer(message: types.Message, state: FSMContext, bot: Bot):
    try:
        timer = int(message.text.strip())
        set_setting('autostart_timer', timer if timer > 0 else None)
        s = get_settings()
        await message.answer(build_autostart_caption(s), reply_markup=get_autostart_menu(s), parse_mode="HTML")
        try:
            import handlers.main_menu as main_menu_module
            await main_menu_module.restart_auto_start_timer(bot)
        except Exception as e:
            print(f"[SETTINGS] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.clear()

# –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç ‚Äî UA/Resolutions (—á–∞—Å—Ç—å —É–∂–µ –±—ã–ª–∞ —É –≤–∞—Å)
@router.callback_query(F.data == "toggle_ua_source")
async def toggle_ua_source(callback: types.CallbackQuery):
    s = get_settings(); current = s.get("ua_source", "random")
    new_val = "file" if current != "file" else "random"
    set_setting("ua_source", new_val)
    await callback.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ UA: {'—Ñ–∞–π–ª' if new_val == 'file' else '—Ä–∞–Ω–¥–æ–º'}")
    s = get_settings()
    await callback.message.edit_text(build_fingerprint_caption(s), reply_markup=get_fingerprint_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "upload_ua_file")
async def upload_ua_file(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª –∏–ª–∏ —Å–ø–∏—Å–æ–∫ UA —Ç–µ–∫—Å—Ç–æ–º.")
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª —Å User-Agent (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_menu())
    await state.set_state(SettingsFSM.waiting_for_ua_file)

@router.message(SettingsFSM.waiting_for_ua_file, F.document)
async def receive_ua_file_document(message: types.Message, state: FSMContext):
    from handlers.settings import _save_user_agents  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ helper —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å
    doc = message.document
    if not doc or (doc.file_name and not doc.file_name.lower().endswith(".txt")):
        await message.answer("–ù—É–∂–µ–Ω .txt —Ñ–∞–π–ª.")
        return
    buf = io.BytesIO()
    await message.bot.download(doc, destination=buf)
    buf.seek(0)
    content = buf.read().decode("utf-8", errors="ignore")
    lines = [l.strip() for l in content.splitlines()]
    count = _save_user_agents(lines)
    await message.answer(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UA: {count}", reply_markup=get_fingerprint_menu(get_settings()), parse_mode="HTML")
    await state.clear()

@router.message(SettingsFSM.waiting_for_ua_file, F.text)
async def receive_ua_file_text(message: types.Message, state: FSMContext):
    from handlers.settings import _save_user_agents
    lines = [l.strip() for l in message.text.splitlines()]
    count = _save_user_agents(lines)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UA: {count}", reply_markup=get_fingerprint_menu(get_settings()), parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "toggle_random_resolution")
async def toggle_random_resolution(callback: types.CallbackQuery):
    s = get_settings(); flag = not s.get("random_resolution", True)
    set_setting("random_resolution", flag)
    await callback.answer(f"–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {'–≤–∫–ª' if flag else '–≤—ã–∫–ª'}")
    s = get_settings()
    await callback.message.edit_text(build_fingerprint_caption(s), reply_markup=get_fingerprint_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "open_resolution_menu")
async def open_resolution_menu(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞</b>\n–ü–ö-–ø—Ä–µ—Å–µ—Ç—ã (‚â•1440√ó900) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë.", reply_markup=get_resolution_menu(s.get("screen_resolution"), s.get("random_resolution", True)), parse_mode="HTML")

@router.callback_query(F.data.startswith("set_resolution:"))
async def set_resolution(callback: types.CallbackQuery):
    _, value = callback.data.split(":", 1)
    if value == "random":
        set_setting("random_resolution", True); set_setting("screen_resolution", None)
        await callback.answer("–†–µ–∂–∏–º —Ä–∞–Ω–¥–æ–º–∞ –≤–∫–ª—é—á—ë–Ω.")
    else:
        if not re.fullmatch(r"\d{2,4}x\d{2,4}", value):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        set_setting("random_resolution", False); set_setting("screen_resolution", value)
        await callback.answer(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {value}")
    s = get_settings()
    await callback.message.edit_text("<b>–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞</b>\n–ü–ö-–ø—Ä–µ—Å–µ—Ç—ã (‚â•1440√ó900) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë.", reply_markup=get_resolution_menu(s.get("screen_resolution"), s.get("random_resolution", True)), parse_mode="HTML")

@router.callback_query(F.data == "enter_custom_resolution")
async def enter_custom_resolution(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –®x–í, –Ω–∞–ø—Ä–∏–º–µ—Ä 1920x1080", reply_markup=get_back_menu())
    await state.set_state(SettingsFSM.waiting_for_custom_resolution)

@router.message(SettingsFSM.waiting_for_custom_resolution, F.text)
async def receive_custom_resolution(message: types.Message, state: FSMContext):
    text = message.text.strip().lower().replace(" ", "")
    m = re.fullmatch(r"(\d{2,4})x(\d{2,4})", text)
    if not m:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1920x1080")
        return
    w, h = int(m.group(1)), int(m.group(2))
    set_setting("random_resolution", False); set_setting("screen_resolution", f"{w}x{h}")
    await message.answer("üïµÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç", reply_markup=get_fingerprint_menu(get_settings()), parse_mode="HTML")
    await state.clear()

# –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç ‚Äî –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
@router.callback_query(F.data == "open_hardware_settings")
async def open_hardware_settings(callback: types.CallbackQuery):
    s = get_settings()
    await callback.answer()
    await callback.message.edit_text("üß† <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b>\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ GPU/—à—É–º—ã/–ø–ª–∞—Ç—Ñ–æ—Ä–º—É/CPU/–ø–∞–º—è—Ç—å.", reply_markup=get_hardware_menu(s), parse_mode="HTML")

@router.callback_query(F.data == "toggle_hw_source")
async def toggle_hw_source(callback: types.CallbackQuery):
    s = get_settings(); cur = s.get("hw_source", "auto")
    newv = "custom" if cur == "auto" else "auto"
    set_setting("hw_source", newv)
    await callback.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {newv}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_gpu_vendor")
async def cycle_hw_gpu_vendor(callback: types.CallbackQuery):
    order = ["auto", "Intel", "NVIDIA", "AMD", "Apple"]
    s = get_settings(); cur = s.get("hw_gpu_vendor", "auto")
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "Intel"
    set_setting("hw_gpu_vendor", nxt)
    # –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–µ–Ω–¥–æ—Ä–∞ —Å–±—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –≤ auto
    set_setting("hw_gpu_model", "auto")
    await callback.answer(f"GPU –≤–µ–Ω–¥–æ—Ä: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_gpu_model")
async def cycle_hw_gpu_model(callback: types.CallbackQuery):
    # –ú–æ–¥–µ–ª–∏ –ø—Ä–æ–∫–ª–∏–∫–∏–≤–∞—é—Ç—Å—è –º–µ–∂–¥—É auto -> —Å–ø–∏—Å–æ–∫ 3-4 –º–æ–¥–µ–ª–µ–π
    from utils.device_profiles import GPU_MODELS
    s = get_settings()
    vendor = s.get("hw_gpu_vendor", "auto")
    if vendor == "auto":
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–¥–æ—Ä–∞.")
        return
    models = ["auto"] + (GPU_MODELS.get(vendor, []) or [])
    cur = s.get("hw_gpu_model", "auto")
    try:
        idx = models.index(cur)
    except ValueError:
        idx = 0
    nxt = models[(idx + 1) % len(models)]
    set_setting("hw_gpu_model", nxt)
    await callback.answer(f"–ú–æ–¥–µ–ª—å: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_noise")
async def cycle_hw_noise(callback: types.CallbackQuery):
    order = ["low", "medium", "high"]
    s = get_settings(); cur = s.get("hw_noise_level", "medium")
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "medium"
    set_setting("hw_noise_level", nxt)
    await callback.answer(f"–®—É–º: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_hc")
async def cycle_hw_hc(callback: types.CallbackQuery):
    order = ["auto", "8", "12", "16", "20"]
    s = get_settings(); cur = str(s.get("hw_hc", "auto"))
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "8"
    set_setting("hw_hc", None if nxt == "auto" else int(nxt))
    await callback.answer(f"CPU threads: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_mem")
async def cycle_hw_mem(callback: types.CallbackQuery):
    order = ["auto", "8", "16", "32"]
    s = get_settings(); cur = str(s.get("hw_mem", "auto"))
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "16"
    set_setting("hw_mem", None if nxt == "auto" else int(nxt))
    await callback.answer(f"Memory: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_platform")
async def cycle_hw_platform(callback: types.CallbackQuery):
    order = ["auto", "Win32", "MacIntel"]
    s = get_settings(); cur = s.get("hw_platform_override", "auto")
    nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else "Win32"
    set_setting("hw_platform_override", nxt)
    await callback.answer(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "toggle_hw_mtp")
async def toggle_hw_mtp(callback: types.CallbackQuery):
    s = get_settings(); cur = int(s.get("hw_max_touch_points", 0) or 0)
    nxt = 0 if cur != 0 else 1
    set_setting("hw_max_touch_points", nxt)
    await callback.answer(f"maxTouchPoints: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "cycle_hw_cdepth")
async def cycle_hw_cdepth(callback: types.CallbackQuery):
    order = [24, 30]
    s = get_settings(); cur = int(s.get("hw_color_depth", 24) or 24)
    nxt = order[(order.index(cur) + 1) % len(order)]
    set_setting("hw_color_depth", int(nxt))
    await callback.answer(f"ColorDepth: {nxt}")
    await callback.message.edit_reply_markup(reply_markup=get_hardware_menu(get_settings()))

@router.callback_query(F.data == "toggle_text_rotation")
async def toggle_text_rotation(callback: types.CallbackQuery):
    s = get_settings()
    s['text_rotation'] = not s.get('text_rotation', False)
    set_setting('text_rotation', s['text_rotation'])
    await callback.answer(f"–†–æ—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤: {'–í–∫–ª' if s['text_rotation'] else '–í—ã–∫–ª'}")
    await callback.message.edit_reply_markup(reply_markup=get_common_menu(s))