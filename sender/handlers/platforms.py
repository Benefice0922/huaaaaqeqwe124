from aiogram import Router, F, types
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.platforms import get_countries_menu, get_platforms_menu, get_platform_settings_menu
from db import get_platform_settings, set_platform_setting, get_cookie_accounts
import html

router = Router()
router.event_types = {"message", "callback_query"}

# --- FSM ---
class PlatformSettings(StatesGroup):
    waiting_for_value = State()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
SETTINGS_LABELS = {
    "custom_text": "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç",
    "max_unsubscribes": "–õ–∏–º–∏—Ç –æ—Ç–ø–∏—Å–æ–∫",
    "max_proxies_per_account": "–õ–∏–º–∏—Ç –ø—Ä–æ–∫—Å–∏",
    "browser_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤",
    "categories": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "selectors": "–î–æ–ø. —Å–µ–ª–µ–∫—Ç–æ—Ä—ã",
    "multithread": "–ú—É–ª—å—Ç–∏–ø–æ—Ç–æ–∫"
}

PARSING_SELECTORS = [
    "–ü–∞—Ä—Å –∏–º–µ–Ω–∏",
    "–ü–∞—Ä—Å —Ü–µ–Ω—ã",
    "–ü–∞—Ä—Å –Ω–∞–∑–≤–∞–Ω–∏—è"
]

SELECTOR_TO_TAG = {
    "–ü–∞—Ä—Å –∏–º–µ–Ω–∏": "[Name]",
    "–ü–∞—Ä—Å —Ü–µ–Ω—ã": "[Price]",
    "–ü–∞—Ä—Å –Ω–∞–∑–≤–∞–Ω–∏—è": "[Title]"
}

async def safe_edit_text(callback, text, reply_markup=None, parse_mode=None):
    try:
        if (hasattr(callback.message, 'text') and callback.message.text == text and
            hasattr(callback.message, 'reply_markup') and callback.message.reply_markup == reply_markup):
            return
        await callback.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        print(f"[EDIT ERROR] {e}")

@router.callback_query(F.data == "work_platforms")
async def platforms_menu(callback: types.CallbackQuery):
    await safe_edit_text(
        callback,
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>",
        reply_markup=get_countries_menu(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "country_kz")
async def kz_platforms_menu(callback: types.CallbackQuery):
    await safe_edit_text(
        callback,
        "<b>–ü–ª–æ—â–∞–¥–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É:",
        reply_markup=get_platforms_menu("kz"),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "country_kg")
async def kg_platforms_menu(callback: types.CallbackQuery):
    await safe_edit_text(
        callback,
        "<b>–ü–ª–æ—â–∞–¥–∫–∏ –ö–∏—Ä–≥–∏–∑–∏–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É:",
        reply_markup=get_platforms_menu("kg"),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("edit_selectors_back_"))
async def back_to_settings_from_selectors(callback: types.CallbackQuery):
    data_parts = callback.data.split("_")
    if len(data_parts) < 4:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    platform = data_parts[-1]
    settings = get_platform_settings(platform)
    config_text = format_settings_text(settings)
    domain = "kg" if platform == "lalafo" else "kz"
    platform_title = f"{platform.capitalize()}.{domain}"
    try:
        await callback.message.edit_text(
            text=f"<b>{platform_title}</b>\n\n{config_text}\n\nüîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:</b>",
            reply_markup=get_platform_settings_menu(platform, settings),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[BACK TO SETTINGS ERROR] {e}")
    await callback.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")

@router.callback_query(F.data == "back_to_countries")
async def back_to_countries(callback: types.CallbackQuery):
    await platforms_menu(callback)

@router.callback_query(F.data == "krisha")
async def krisha_selected(callback: types.CallbackQuery):
    settings = get_platform_settings("krisha")
    await callback.answer()
    config_text = format_settings_text(settings)
    await safe_edit_text(
        callback,
        f"<b>Krisha.kz</b>\n\n{config_text}\n\nüîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:</b>",
        reply_markup=get_platform_settings_menu("krisha", settings),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "kolesa")
async def kolesa_selected(callback: types.CallbackQuery):
    settings = get_platform_settings("kolesa")
    await callback.answer()
    config_text = format_settings_text(settings)
    await safe_edit_text(
        callback,
        f"<b>Kolesa.kz</b>\n\n{config_text}\n\nüîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:</b>",
        reply_markup=get_platform_settings_menu("kolesa", settings),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "lalafo")
async def lalafo_selected(callback: types.CallbackQuery):
    settings = get_platform_settings("lalafo")
    cookie_accounts = get_cookie_accounts()
    cookie_count = len(cookie_accounts)
    await callback.answer()
    config_text = format_settings_text(settings)
    config_text += f"\n\nüç™ <b>–î–æ—Å—Ç—É–ø–Ω–æ cookie-–∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> <code>{cookie_count}</code>"
    await safe_edit_text(
        callback,
        f"<b>Lalafo.kg</b>\n\n{config_text}\n\nüîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:</b>",
        reply_markup=get_platform_settings_menu("lalafo", settings),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "platforms")
async def back_to_platforms_by_country(callback: types.CallbackQuery, state: FSMContext = None):
    text = callback.message.text or ""
    country = "kz"
    if "Lalafo" in text or "lalafo" in text:
        country = "kg"
    if state:
        data = await state.get_data()
        platform = data.get("platform")
        if platform == "lalafo":
            country = "kg"
    if country == "kg":
        await kg_platforms_menu(callback)
    else:
        await kz_platforms_menu(callback)

@router.callback_query(F.data == "back_to_main")
async def platforms_back(callback: types.CallbackQuery):
    await callback.answer()
    try:
        from handlers.main_menu import cmd_start
        await cmd_start(callback.message)
    except Exception as e:
        print(f"[BACK TO MAIN ERROR] {e}")
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            parse_mode="HTML"
        )

def format_settings_text(settings: dict) -> str:
    text = ""
    custom_text = settings.get("custom_text", "–ù–µ –∑–∞–¥–∞–Ω–æ")
    # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫
    if isinstance(custom_text, list):
        text += f"üìù <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <i>{len(custom_text)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>\n"
        if custom_text:
            preview = html.escape(custom_text[0])
            text += f"<pre>{preview}</pre>\n"
    elif isinstance(custom_text, str) and custom_text != "–ù–µ –∑–∞–¥–∞–Ω–æ":
        safe_text = html.escape(custom_text)
        if len(safe_text) > 300:
            safe_text = safe_text[:300] + "..."
        text += f"üìù <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<pre>{safe_text}</pre>\n"
    else:
        text += f"üìù <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> <i>–ù–µ –∑–∞–¥–∞–Ω–æ</i>\n"

    unsub = settings.get("max_unsubscribes", "‚Äî")
    proxy = settings.get("max_proxies_per_account", "‚Äî")
    text += f"üì§ <b>–õ–∏–º–∏—Ç –æ—Ç–ø–∏—Å–æ–∫:</b> <code>{unsub}</code> | üåê <b>–õ–∏–º–∏—Ç –ø—Ä–æ–∫—Å–∏:</b> <code>{proxy}</code>\n"

    browsers = settings.get("browser_count", "‚Äî")
    text += f"üñ•Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤:</b> <code>{browsers}</code>\n"

    categories = settings.get("categories", [])
    if isinstance(categories, list):
        cats_str = "\n".join(categories) if categories else "‚Äî"
    else:
        cats_str = str(categories)
    text += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n<code>{cats_str}</code>\n"

    selectors = settings.get("selectors", [])
    if not isinstance(selectors, list):
        selectors = [str(selectors)] if selectors else []
    sel_tags = [SELECTOR_TO_TAG.get(sel, sel) for sel in selectors]
    sel_str = ", ".join(sel_tags) if sel_tags else "‚Äî"
    text += f"üîé <b>–î–æ–ø. —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:</b> <code>{sel_str}</code>\n"

    mt = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.get("multithread", False) else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    text += f"üîÑ <b>–ú—É–ª—å—Ç–∏–ø–æ—Ç–æ–∫:</b> {mt}"

    return text.strip()

@router.callback_query(F.data.startswith("edit_"))
async def edit_setting(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith("edit_selectors_back_"):
        return
    parts = callback.data.split("_")
    if len(parts) < 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    key = "_".join(parts[1:-1])
    platform = parts[-1]
    if key not in SETTINGS_LABELS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        return
    await state.update_data(editing_key=key, platform=platform)
    if key == "selectors":
        await show_selectors_menu(callback, platform)
        return
    if key == "categories":
        await callback.message.edit_text(
            f"üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SETTINGS_LABELS[key]}</b>\n\n"
            "–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:",
            parse_mode="HTML",
            reply_markup=None
        )
    elif key == "custom_text":
        await callback.message.edit_text(
            f"üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SETTINGS_LABELS[key]}</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ .txt —Ñ–∞–π–ª —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî –≤–æ—Å–µ–º—å –¥–µ—Ñ–∏—Å–æ–≤ --------), "
            "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.",
            parse_mode="HTML",
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            f"üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SETTINGS_LABELS[key]}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            parse_mode="HTML",
            reply_markup=None
        )
    await state.set_state(PlatformSettings.waiting_for_value)
    await callback.answer()

@router.message(PlatformSettings.waiting_for_value, F.content_type.in_({ContentType.TEXT, ContentType.DOCUMENT}))
async def save_setting_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    key = data.get("editing_key")
    platform = data.get("platform")

    if not key or not platform:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–µ—Ä—è–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # 1) –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
    if key == "custom_text":
        if message.content_type == ContentType.DOCUMENT and message.document:
            doc = message.document
            if not doc.file_name.lower().endswith(".txt"):
                await message.answer("–ù—É–∂–µ–Ω .txt —Ñ–∞–π–ª.")
                return
            try:
                buf = await message.bot.download(doc)
                content = buf.read().decode("utf-8", errors="ignore")
                texts = [t.strip() for t in content.split("--------") if t.strip()]
                set_platform_setting(platform, key, texts)
                await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(texts)}")
            except Exception as e:
                print(f"[CUSTOM_TEXT FILE ERROR] {e}")
                await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                return
        else:
            user_input = (message.text or "").strip()
            if not user_input:
                await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                return
            set_platform_setting(platform, key, user_input)
            await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        # 2) –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if message.content_type != ContentType.TEXT:
            await message.answer("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return

        user_input = (message.text or "").strip()
        if not user_input:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        if key in ["max_unsubscribes", "max_proxies_per_account", "browser_count"]:
            try:
                user_input = int(user_input)
            except ValueError:
                await message.answer("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        elif key == "categories":
            raw_lines = [line for line in user_input.splitlines() if line.strip()]
            categories = []
            for line in raw_lines:
                parts = [p.strip() for p in line.split(",") if p.strip()]
                categories.extend(parts)
            user_input = categories

        set_platform_setting(platform, key, user_input)
        await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    # –í–µ—Ä–Ω—ë–º—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–æ—â–∞–¥–∫–∏
    settings = get_platform_settings(platform)
    config_text = format_settings_text(settings)
    domain = "kg" if platform == "lalafo" else "kz"
    platform_title = f"{platform.capitalize()}.{domain}"
    if platform == "lalafo":
        cookie_accounts = get_cookie_accounts()
        cookie_count = len(cookie_accounts)
        config_text += f"\n\nüç™ <b>–î–æ—Å—Ç—É–ø–Ω–æ cookie-–∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> <code>{cookie_count}</code>"
    await message.answer(
        f"<b>{platform_title}</b>\n\n{config_text}\n\nüîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:</b>",
        reply_markup=get_platform_settings_menu(platform, settings),
        parse_mode="HTML"
    )
    await state.clear()

async def show_selectors_menu(callback: types.CallbackQuery, platform: str):
    settings = get_platform_settings(platform)
    saved_selectors = settings.get("selectors", [])
    if not isinstance(saved_selectors, list):
        saved_selectors = []
    kb = []
    for selector in PARSING_SELECTORS:
        status = "‚úÖ" if selector in saved_selectors else "‚ùå"
        callback_data = f"toggle_selector_{selector.replace(' ', '_')}_{platform}"
        kb.append([
            types.InlineKeyboardButton(
                text=f"{status} {selector}",
                callback_data=callback_data
            )
        ])
    kb.append([
        types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"edit_selectors_back_{platform}"
        )
    ])
    try:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb)
        )
    except Exception as e:
        print(f"[SELECTORS MENU ERROR] {e}")
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_selector_"))
async def toggle_selector(callback: types.CallbackQuery):
    data_parts = callback.data.split("_")
    if len(data_parts) < 4:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞.")
        return
    platform = data_parts[-1]
    selector_key = "_".join(data_parts[2:-1])
    selector = selector_key.replace("_", " ")
    settings = get_platform_settings(platform)
    saved_selectors = settings.get("selectors", [])
    if not isinstance(saved_selectors, list):
        saved_selectors = []
    if selector in saved_selectors:
        saved_selectors.remove(selector)
        action_text = f"‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –≤—ã–∫–ª—é—á–µ–Ω."
    else:
        saved_selectors.append(selector)
        action_text = f"‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}' –≤–∫–ª—é—á–µ–Ω."
    set_platform_setting(platform, "selectors", saved_selectors)
    await show_selectors_menu(callback, platform)
    await callback.answer(action_text)

@router.callback_query(F.data.startswith("toggle_multithread_"))
async def toggle_multithread_callback(callback: types.CallbackQuery):
    platform = callback.data.split("_")[2]
    settings = get_platform_settings(platform)
    new_value = not settings.get('multithread', False)
    set_platform_setting(platform, 'multithread', new_value)
    action_text = f"–ú—É–ª—å—Ç–∏–ø–æ—Ç–æ–∫ {'–≤–∫–ª—é—á—ë–Ω' if new_value else '–æ—Ç–∫–ª—é—á—ë–Ω'} –¥–ª—è {platform.capitalize()}"
    await callback.answer(action_text)
    settings = get_platform_settings(platform)
    config_text = format_settings_text(settings)
    domain = "kg" if platform == "lalafo" else "kz"
    platform_title = f"{platform.capitalize()}.{domain}"
    if platform == "lalafo":
        cookie_accounts = get_cookie_accounts()
        cookie_count = len(cookie_accounts)
        config_text += f"\n\nüç™ <b>–î–æ—Å—Ç—É–ø–Ω–æ cookie-–∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> <code>{cookie_count}</code>"
    try:
        await callback.message.edit_text(
            text=f"<b>{platform_title}</b>\n\n{config_text}\n\nüîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:</b>",
            reply_markup=get_platform_settings_menu(platform, settings),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[MULTITHREAD TOGGLE ERROR] {e}")