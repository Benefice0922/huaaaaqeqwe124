const { Telegraf, Markup } = require("telegraf");
const stage = require("./handlers/scenes");
const session = require("telegraf/session");
const moment = require("moment");
const { Op, Sequelize } = require("sequelize");

const {
  Items,
  settings,
  Mentors,
  users,
  items,
  BanList,
  Profits,
  Supports,
  services,
} = require("./database/index");
const config = require("./config");

const bot = new Telegraf(config.bot.token, { handlerTimeout: 5000 });

bot.use(session());
bot.use(require("./middlewares/main"));
bot.use(stage.middleware());

bot.action("sendRequest", async (ctx) => {
  const Settings = await settings.findOne({
    where: {
      id: 1,
    },
  });
  return ctx.scene.enter("sendRequest", {
    requestChatId: Settings.requestChatId,
  });
});

bot.action(/^mail_(.+)$/, async (ctx) => {
  return ctx.scene.enter("adMailer");
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–æ—Ç–µ
bot.action("toggleBotNotifications", async (ctx) => {
  try {
    const currentStatus = ctx.state.user.botNotifications || false;
    const newStatus = !currentStatus;
    
    await ctx.state.user.update({
      botNotifications: newStatus
    });

    await ctx.answerCbQuery(
      `üîî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –±–æ—Ç–µ ${newStatus ? "üü¢ –≤–∫–ª—é—á–µ–Ω–∞" : "üî¥ –≤—ã–∫–ª—é—á–µ–Ω–∞"}!`,
      false
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return require("./handlers/commands/worker/profile/settings")(ctx);
  } catch (err) {
    console.log("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:", err);
    return ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞!", true);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤ –ª–æ–≥–∞—Ö
bot.action("toggleServiceVisibility", async (ctx) => {
  try {
    const currentStatus = ctx.state.user.hideService || false;
    const newStatus = !currentStatus;
    
    await ctx.state.user.update({
      hideService: newStatus
    });

    await ctx.answerCbQuery(
      `üëÅÔ∏è –°–µ—Ä–≤–∏—Å –≤ –ª–æ–≥–∞—Ö ${newStatus ? "üî¥ —Å–∫—Ä—ã—Ç" : "üü¢ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è"}!`,
      false
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return require("./handlers/commands/worker/profile/settings")(ctx);
  } catch (err) {
    console.log("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞:", err);
    return ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞!", true);
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
bot.action("toggleBalanceChecker", async (ctx) => {
  try {
    const currentStatus = ctx.state.user.balanceChecker || false;
    const newStatus = !currentStatus;
    
    await ctx.state.user.update({
      balanceChecker: newStatus
    });

    await ctx.answerCbQuery(
      `üí≥ –ß–µ–∫–µ—Ä –±–∞–ª–∞–Ω—Å–∞ ${newStatus ? "üü¢ –≤–∫–ª—é—á–µ–Ω" : "üî¥ –≤—ã–∫–ª—é—á–µ–Ω"}!`,
      false
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return require("./handlers/commands/worker/profile/settings")(ctx);
  } catch (err) {
    console.log("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞:", err);
    return ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞!", true);
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –¢–ü"
bot.action(/^openSupport_(.+)$/, async (ctx) => {
  try {
    const item = await items.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    if (!item) {
      return ctx.answerCbQuery("‚ùå –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", true);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –Ω–∞ "–æ—Ç–∫—Ä—ã—Ç" (1 = –æ—Ç–∫—Ä—ã—Ç–æ)
    await item.update({
      chatStatus: 1,
    });

    return ctx.answerCbQuery("üí¨ –¢–ü –æ—Ç–∫—Ä—ã—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ! –ú–∞–º–æ–Ω—Ç —É–≤–∏–¥–∏—Ç –æ–∫–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.", false);
  } catch (err) {
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¢–ü:", err);
    return ctx.answerCbQuery("ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¢–ü!", true);
  }
});
bot.action("siteStatus", require("./handlers/commands/worker/settings/siteStatus"));
bot.action(/^siteStatus_(on|off)$/, async (ctx) => {
  try {
    await ctx.state.user.update({
      siteStatus: ctx.match[1] == "on" ? true : false
    })

    return require("./handlers/commands/worker/settings/siteStatus")(ctx)
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ—Ä–≤–∏—Å"
bot.action("createPreviousService", async (ctx) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π item –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastItem = await items.findOne({
      where: {
        workerId: ctx.from.id,
      },
      order: [['createdAt', 'DESC']],
    });

    if (!lastItem) {
      return ctx.editMessageText(
        "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Å—Å—ã–ª–æ–∫</b>",
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("üåç –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É", "createLink")],
            [Markup.callbackButton("< –í –º–µ–Ω—é", "menu")],
          ]),
        }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Å—ã–ª–∫–∏
    const service = await services.findOne({
      where: {
        code: lastItem.serviceCode,
      },
    });

    if (!service || !service.work) {
      return ctx.editMessageText(
        "‚ùå <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>",
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("üåç –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", "createLink")],
            [Markup.callbackButton("< –í –º–µ–Ω—é", "menu")],
          ]),
        }
      );
    }

    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–∏—Å
      ctx.match = [null, service.code];
      return ctx.scene.enter(`create_${service.code}`);
    } catch (sceneErr) {
      console.log(`–°—Ü–µ–Ω–∞ create_${service.code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:`, sceneErr);
      
      return ctx.editMessageText(
        `‚ùå <b>–°–µ—Ä–≤–∏—Å ${service.title} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("üåç –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", "createLink")],
            [Markup.callbackButton("< –í –º–µ–Ω—é", "menu")],
          ]),
        }
      );
    }

  } catch (err) {
    console.log("–û—à–∏–±–∫–∞ –≤ createPreviousService:", err);
    return ctx.editMessageText(
      "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>",
      {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          [Markup.callbackButton("< –í –º–µ–Ω—é", "menu")],
        ]),
      }
    );
  }
});
bot.action(/^setSupport(Bot|Smartsupp)$/, async (ctx) => {
  try {
    if (ctx.match[1] == "Bot") {
      await ctx.state.user.update({
        supportType: "bot",
      });
      return ctx
        .editMessageText(`‚öôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¢–ü —á–µ—Ä–µ–∑ –±–æ—Ç–∞.</b>`, {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("< –ù–∞–∑–∞–¥", "typeSupport")],
          ]),
        })
        .catch((err) => err);
    } else {
      return ctx.scene.enter("setSmartsupp");
    }
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

bot.action("typeSupport", async(ctx) => {
  try {
    return ctx
      .editMessageText(
        `üóÇÔ∏è <b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:</b>
‚ï∞ üì∂ –ü—Ä–æ—Ñ–∏–ª—å -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –¢–ü

‚ï≠ ‚ñ´Ô∏è <b>Username:</b> <code>${ctx.from.first_name}</code>
‚îú ‚ñ´Ô∏è <b>User ID:</b> <code>${ctx.from.id}</code>
‚ï∞ ‚ñ´Ô∏è <b>Tag:</b> <code>#${ctx.state.user.tag}</code>

‚îú ‚ñ´Ô∏è <b>–¢–∏–ø –¢–ü:</b> ${ctx.state.user.supportType == "bot" ? "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞" : "Smartsupp"}

‚ÑπÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–ü.</b>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton("–ë–æ—Ç", "setSupportBot"),
              Markup.callbackButton("Smartsupp", "setSupportSmartsupp")
            ],
            [Markup.callbackButton("< –ù–∞–∑–∞–¥", "settings")],
          ]),
        }
      )
      .catch((err) => err); 
  } catch(err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
})

bot.action("top", async (ctx) => {
  try {
    const topList = await users.findAll({
      subQuery: false,
      attributes: {
        include: [
          [Sequelize.fn("SUM", Sequelize.col("profitSum")), "totalProfits"],
        ],
      },
      group: ["Users.id"],
      order: [[Sequelize.literal("totalProfits"), "desc"]],
      limit: 10,
    });

    var top = topList
      .map(
        (v, i) =>
          `${
            v.getDataValue("totalProfits") == 0
              ? ""
              : `<b>${i + 1}. #${v.tag}: ‚Ç¨ ${parseFloat(
                  v.getDataValue("totalProfits")
                ).toFixed(2)}</b>`
          }`
      )
      .join("\n");

    if (topList.length < 1) top = "üîç –í —Ç–æ–ø–µ –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç—É";

    await ctx.deleteMessage().catch((err) => err);

    return ctx
      .replyWithPhoto(
        { url: "https://i.imgur.com/Fu7ECMZ.jpeg" },
        {
          caption: `üìä <b>–¢–û–ü 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:</b>
        
${top}`,
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu")],
          ]),
        }
      )
      .catch((err) => err);
  } catch (err) {
console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

bot.command("top", async (ctx) => {
  try {
    const topList = await users.findAll({
      subQuery: false,
      attributes: {
        include: [
          [Sequelize.fn("SUM", Sequelize.col("profitSum")), "totalProfits"],
        ],
      },
      group: ["Users.id"],
      order: [[Sequelize.literal("totalProfits"), "desc"]],
      limit: 10,
    });

    var top = topList
      .map(
        (v, i) =>
          `${
            v.getDataValue("totalProfits") == 0
              ? ""
              : `<b>${i + 1}. #${v.tag}: ‚Ç¨ ${parseFloat(
                  v.getDataValue("totalProfits")
                ).toFixed(2)}</b>`
          }`
      )
      .join("\n");

    if (topList.length < 1) top = "üîç –í —Ç–æ–ø–µ –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç—É";

    await ctx.deleteMessage().catch((err) => err);

    return ctx
      .replyWithPhoto(
        { url: "https://i.imgur.com/Fu7ECMZ.jpeg" },
        {
          caption: `üìä <b>–¢–û–ü 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:</b>
        
${top}`,
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("‚ôªÔ∏è –°–∫—Ä—ã—Ç—å", "hide")],
          ]),
        }
      )
      .catch((err) => err);
  } catch (err) {
console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

bot.command("kassa", async (ctx) => {
  try {
    const kassa = await Profits.sum("eurAmount"),
      kassa_today = await Profits.sum("eurAmount", {
        where: {
          createdAt: {
            [Op.gte]: moment().startOf("day").toDate(),
          },
        },
      });
    kassa_month = await Profits.sum("eurAmount", {
      where: {
        createdAt: {
          [Op.gte]: moment().startOf("month").toDate(),
        },
      },
    });

    const countProfits = await Profits.count(),
      count_today = await Profits.count({
        where: {
          createdAt: {
            [Op.gte]: moment().startOf("day").toDate(),
          },
        },
      });
    count_month = await Profits.count({
      where: {
        createdAt: {
          [Op.gte]: moment().startOf("month").toDate(),
        },
      },
    });

    return ctx
      .reply(
        `–ö–∞—Å—Å–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>${count_today}</b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${parseFloat(
          kassa_today == null ? "0" : kassa_today
        ).toFixed(2)} ‚Ç¨</b>

–ö–∞—Å—Å–∞ –∑–∞ –º–µ—Å—è—Ü: <b>${count_month}</b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${parseFloat(
          kassa_month == null ? "0" : kassa_month
        ).toFixed(2)} ‚Ç¨</b>	

–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${countProfits}</b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${parseFloat(
          kassa == null ? "0" : kassa
        ).toFixed(2)} ‚Ç¨</b>`,
        {
          parse_mode: "HTML",
        }
      )
      .catch((err) => err);
  } catch (err) {
console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

bot.action(/^ban_(.+)$/, async (ctx) => {
  try {
    if (ctx.match[1] == "undefined")
      return ctx.replyWithHTML("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏!");

    const { count, rows } = await BanList.findAndCountAll({
      where: {
        ip: ctx.match[1],
        workerId: ctx.from.id,
      },
    });

    if (count > 0)
      return ctx.replyWithHTML(
        "‚ùå –î–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!"
      );

    await BanList.create({
      ip: ctx.match[1],
      workerId: ctx.from.id,
    });

    return ctx.replyWithHTML("‚úÖ –î–æ—Å—Ç—É–ø –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω");
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

bot.action("hide", async (ctx) => {
  try {
    return ctx.deleteMessage().catch((err) => err);
  } catch (err) {
    console.log(err);
  }
});

bot.action(/^reqBack_([A-Za-z0-9_]+)$/, async (ctx) => {
  try {
    const item = await items.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    return ctx.editMessageReplyMarkup(
      Markup.inlineKeyboard([
        [Markup.callbackButton(`üëÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω`, `eye_${item.id}`)],
        [
          Markup.callbackButton(`–ù–∞–ø–∏—Å–∞—Ç—å`, `suppportReply_${item.id}`),
          Markup.callbackButton(`–ß–∞—Ç`, `chat_${item.id}`),
        ],
      ])
    );
  } catch (err) {
    console.log(err);
  }
});
bot.action(/^eye_([A-Za-z0-9_]+)$/, async (ctx) => {
  try {
    const item = await items.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    return ctx
      .answerCbQuery(
        `${
          item.online == true
            ? "üü¢ –¢–≤–æ–π –º–∞–º–æ–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ!"
            : "üî¥ –¢–≤–æ–π –º–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞ —Å–∞–π—Ç–µ!"
        }`
      )
      .catch((err) => err);
  } catch (err) {
    console.log(err);
  }
});

bot.action(/^chat(Open|Close)_([A-Za-z0-9_]+)$/, async (ctx) => {
  try {
    const item = await items.findOne({
      where: {
        id: ctx.match[2],
      },
    });

    await item.update({
      chatStatus: ctx.match[1] == "Open" ? 1 : 2,
    });

    return ctx
      .answerCbQuery(
        `üì™ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ ${
          ctx.match[1] == "Open" ? "–æ—Ç–∫—Ä—ã—Ç" : "–∑–∞–∫—Ä—ã—Ç"
        }!`
      )
      .catch((err) => err);
  } catch (err) {
    console.log(err);
  }
});
bot.action(/^chat_([A-Za-z0-9_]+)$/, async (ctx) => {
  try {
    const item = await items.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    return ctx.editMessageReplyMarkup(
      Markup.inlineKeyboard([
        [
          // Markup.callbackButton("–î–∏–∞–ª–æ–≥", `chatHistory_${item.id}`),
          Markup.callbackButton("–û—Ç–∫—Ä—ã—Ç—å", `chatOpen_${item.id}`),
        ],
        [
          // Markup.callbackButton("–û—Ç–∫—Ä—ã—Ç—å", `chatOpen_${item.id}`),
          // Markup.callbackButton("–ó–∞–∫—Ä—ã—Ç—å", `chatClose_${item.id}`),
        ],
        [Markup.callbackButton("–ù–∞–∑–∞–¥", `reqBack_${item.id}`)],
      ])
    );
  } catch (err) {
    console.log(err);
  }
});
bot.action(/^suppportReply_(.+)$/, async (ctx) => {
  return ctx.scene.enter("replySupport");
});

bot.action("chartProfit", require("./handlers/commands/worker/profile/chart"));

bot.action("chats", require("./handlers/commands/worker/profile/chats"));

bot.command("status", require("./handlers/commands/worker/status"));

bot.action("settings", require("./handlers/commands/worker/profile/settings"));
bot.action("changeTag", async (ctx) => {
  return ctx.scene.enter("changeTag");
});

bot.action("changeWallet", async (ctx) => {
  return ctx.scene.enter("changeWallet");
});
bot.action("wallet", require("./handlers/commands/worker/profile/wallet"));

bot.action("stats", require("./handlers/commands/worker/profile/stats"));

bot.action(/^changePrice_(.+)$/, async (ctx) => {
  const item = await items.findOne({
    where: {
      id: ctx.match[1]
    }
  })

  if(!item) return ctx
  .answerCbQuery(
    `‚ôªÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`,
    true
  )
  .catch((err) => err);

  return ctx.scene.enter("changePrice", {
    itemId: ctx.match[1],
  });
});
bot.action(/^destroyAd_(.+)$/, async (ctx) => {
  try {
    const item = await items.findOne({
      where: {
        id: ctx.match[1]
      }
    })

    if(!item) return ctx
    .answerCbQuery(
      `‚ôªÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`,
      true
    )
    .catch((err) => err);

    await items.destroy({
      where: {
        id: ctx.match[1],
      },
    });
    
    await ctx
      .answerCbQuery(
        `‚ôªÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${ctx.match[1]} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!
    
‚ù£Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—á–∏—â–∞–µ—Ç–µ –ë–î!`,
        true
      )
      .catch((err) => err);

      return require("./handlers/commands/worker/profile/myAds")(ctx)
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});
bot.action(/^ad_(.+)$/, require("./handlers/commands/worker/ads/myAd"));
bot.action("clearMyAds", async (ctx) => {
  try {
    const destroy = await items.destroy({
      where: {
        workerId: ctx.from.id,
      },
    });

    return ctx
      .answerCbQuery(
        `‚ôªÔ∏è –£–¥–∞–ª–µ–Ω–æ: ${destroy}!
    
‚ù£Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—á–∏—â–∞–µ—Ç–µ –ë–î!`,
        true
      )
      .catch((err) => err);
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});
bot.action(
  /^my_(pay|receive|other)Ads$/,
  require("./handlers/commands/worker/ads/myTypeAds")
);
bot.action("myAds", require("./handlers/commands/worker/profile/myAds"));

bot.action("profile", require("./handlers/commands/worker/profile/index"));

bot.action("mentors", require("./handlers/commands/worker/mentors/index"));
bot.action(
  /^mentor_(\d+)$/,
  require("./handlers/commands/worker/mentors/mentorInfo")
);
bot.action(/^teach_(\d+)$/, async (ctx) => {
  try {
    const mentor = await Mentors.findOne({
      where: {
        id: ctx.match[1],
      },
    });
    await users.update(
      {
        mentorId: mentor.workerId,
      },
      {
        where: {
          id: ctx.from.id,
        },
      }
    );
    if (ctx.state.user.status == 3) {
      return ctx.editMessageText(
        "‚ö†Ô∏è –¢—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞!",
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("< –ù–∞–∑–∞–¥", "mentors")],
          ]),
        }
      );
    }
    await ctx.telegram.sendMessage(
      mentor.workerId,
      `üßë‚Äçüè´ <b>–£ —Ç–µ–±—è –Ω–æ–≤—ã–π —É—á–µ–Ω–∏–∫ <a href="tg://user?id=${ctx.from.id}">${ctx.from.username}</a></b>`,
      {
        parse_mode: "HTML",
      }
    );
    return ctx.editMessageText(
      `üßë‚Äçüè´ <b>–í–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫: <a href="tg://user?id=${mentor.workerId}">${mentor.username}</a>
üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –ª—Å –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>`,
      {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          [Markup.callbackButton("< –ù–∞–∑–∞–¥", "menu")],
        ]),
      }
    );
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});
bot.action("reqMentor", async (ctx) => {
  try {
    return ctx.scene.enter(`sendMentorReq`);
  } catch (err) {
    console.log(err);
    return ctx.replyWithHTML("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö");
  }
});
// –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
bot.action("myProfits", async (ctx) => {
  try {
    const profits = await Profits.findAll({
      where: { workerId: ctx.from.id },
      order: [['createdAt', 'DESC']],
      limit: 20
    });

    const totalSum = await Profits.sum('eurAmount', {
      where: { workerId: ctx.from.id }
    }) || 0;

    const totalCount = await Profits.count({
      where: { workerId: ctx.from.id }
    });

    let profitsList = '';
    if (profits.length > 0) {
      profitsList = profits.map((profit, index) => 
        `${index + 1}. ‚Ç¨${(profit.eurAmount && profit.eurAmount.toFixed(2)) || '0.00'} - ${profit.serviceCode || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${moment(profit.createdAt).format('DD.MM.YYYY')})`
      ).join('\n');
    } else {
      profitsList = 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–æ–≤';
    }

    return ctx.editMessageText(
      `üí∞ <b>–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã:</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
¬∑ –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>${totalCount}</b>
¬∑ –û–±—â–∞—è —Å—É–º–º–∞: <b>‚Ç¨${totalSum.toFixed(2)}</b>

üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø—Ä–æ—Ñ–∏—Ç–æ–≤:</b>
${profitsList}`,
      {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          [Markup.callbackButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu")]
        ])
      }
    );
  } catch (err) {
    console.log(err);
    return ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏—Ç–æ–≤!", true);
  }
});
bot.action("report", async (ctx) => {
  try {
    return ctx.scene.enter(`report`);
  } catch (err) {
    console.log(err);
    return ctx.replyWithHTML("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö");
  }
});

bot.start(
  (ctx) =>
    ctx.chat.id == ctx.from.id &&
    require("./handlers/commands/worker/start")(ctx)
);
bot.action(
  "menu",
  (ctx) =>
    ctx.chat.id == ctx.from.id &&
    require("./handlers/commands/worker/start")(ctx)
);
bot.hears(
  "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
  (ctx) =>
    ctx.chat.id == ctx.from.id &&
    require("./handlers/commands/worker/start")(ctx)
);

bot.action(
  "createLink",
  require("./handlers/commands/worker/createLink/createLink")
);
// bot.action("createLink", async(ctx) => {
//     return ctx.scene.enter("createLink")
// })
bot.action(
  /^country_([A-Za-z0-9_]+)$/,
  require("./handlers/commands/worker/createLink/selectService")
);
bot.action(/^service_([A-Za-z0-9_]+)$/, async (ctx) => {
  try {
    return ctx.scene.enter(`create_${ctx.match[1]}`);
  } catch (err) {
    console.log(err);
    return ctx.replyWithHTML("‚ùå –¢–∞–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¢–ü
bot.on('text', async (ctx, next) => {
  if (ctx.message.reply_to_message && ctx.message.reply_to_message.from.is_bot) {
    const replyText = ctx.message.reply_to_message.text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¢–ü
    if (replyText && replyText.includes('–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –º–∞–º–æ–Ω—Ç—É –≤ –¢–ü')) {
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ–≥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—â–µ–º Track: –∏–ª–∏ üÜî Track:)
        let itemId = null;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Track ID
        const trackMatch = replyText.match(/üÜî Track: (\w+)/);
        if (trackMatch) {
          itemId = trackMatch[1];
        } else {
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Track, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
          const altMatch = replyText.match(/Track ID: (\w+)/) || replyText.match(/ID: (\w+)/);
          if (altMatch) {
            itemId = altMatch[1];
          }
        }
        
        if (itemId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
          const item = await items.findOne({
            where: {
              id: itemId,
            },
          });
          
          if (item) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await Supports.create({
              itemId: itemId,
              text: ctx.message.text,
              who: "Support",
            });

            return ctx.reply("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–ü!");
          } else {
            return ctx.reply("‚ùå –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
          }
        } else {
          return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ª–æ–≥–∞!");
        }
      } catch (err) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ü:", err);
        return ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ü!");
      }
    }
  }
  
  // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
  return next();
});
bot.action(/^reqInfo_([A-Za-z0-9_]+)$/, async (ctx) => {
  try {
    const item = await Items.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    await ctx.answerCbQuery().catch((err) => err);

    await ctx.replyWithHTML(
      `<i>–û–±—ä—è–≤–ª–µ–Ω–∏–µ</i> <b>#${item.id}</b>
        
<i>–ù–∞–∑–≤–∞–Ω–∏–µ:</i> <b>${item.title}</b>
<i>–¶–µ–Ω–∞:</i> <b>${item.price}</b>`,
      {
        reply_to_message_id: ctx.update.callback_query.message.message_id,
        reply_markup: Markup.inlineKeyboard([
          [Markup.callbackButton("–°–∫—Ä—ã—Ç—å", "hide")],
        ]),
      }
    );
  } catch (err) {
    console.log(err);
  }
});

bot.action("hide", async (ctx) => {
  try {
    return ctx.deleteMessage().catch((err) => err);
  } catch (err) {
    console.log(err);
  }
});

bot.action("none", async (ctx) => {
  try {
    return ctx
      .answerCbQuery("–ù–∞—Ö—É–π —Ç—ã —Å—é–¥–∞ –Ω–∞–∂–∏–º–∞–µ—à—å", true)
      .catch((err) => err);
  } catch (err) {
    console.log(err);
  }
});

bot.use(require("./vbiv"));
bot.use(require("./panel"));

bot.use(require("./middlewares/other"));

async function startBot() {
  console.clear();

  bot
    .launch()
    .then(() => {
      console.log(`–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: t.me/uglyjs)`);
    })
    .catch((err) => {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${err}`);
    });
}

startBot();

bot.catch((err) => {
  console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ${err}`)
})

process.on('unhandledRejection', e => { 
  console.log(e);
  /* exec('pm2 restart main') */
});

process.on('uncaughtException', e => { 
  console.log(e); 
  // /* exec('pm2 restart main') */
});

process.on('rejectionHandled', event => { 
  console.log(event); 
  /* exec('pm2 restart main') */
});